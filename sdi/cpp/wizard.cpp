///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/bitmap.h>
#include <wx/bmpbndl.h>
#include <wx/icon.h>
#include <wx/image.h>
#include <wx/statbmp.h>
#include <wx/valgen.h>

#include "images.h"

#include "wizard.h"

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxImage
#ifdef __cpp_inline_variables
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
#else
static wxImage wxueImage(const unsigned char* data, size_t size_data)
#endif
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

namespace wxue_img
{
    extern const unsigned char hide_png[242];  // ../art/hide.png
}

Wizard::Wizard(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, long style) : wxWizard()
{
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    SetExtraStyle(GetExtraStyle() | wxWIZARD_EX_HELPBUTTON);
    SetBorder(15);
    if (!Create(parent, id, title, wxue_img::bundle_wiztest_png(), pos, style))
    {
        return;
    }

    auto* wizPage = new wxWizardPageSimple(this);

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxStaticText(wizPage, wxID_ANY, "This is the first Wizard page");
    box_sizer->Add(m_staticText, wxSizerFlags().Border(wxALL));

    m_calendar = new wxCalendarCtrl(wizPage, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize,
        wxCAL_SHOW_HOLIDAYS);
    box_sizer->Add(m_calendar, wxSizerFlags().Border(wxALL));
    wizPage->SetSizerAndFit(box_sizer);

    auto* wizPage2 = new wxWizardPageSimple(this);

    auto* box_sizer2 = new wxBoxSizer(wxVERTICAL);

    m_staticText2 = new wxStaticText(wizPage2, wxID_ANY, "This is the second Wizard page which is wider.");
    box_sizer2->Add(m_staticText2, wxSizerFlags().Border(wxALL));

    auto* parent_sizer3 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    staticText = new wxStaticText(wizPage2, wxID_ANY, "Scrollbar:");
    box_sizer_2->Add(staticText, wxSizerFlags().Border(wxALL));

    m_scrollBar = new wxScrollBar(wizPage2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSB_HORIZONTAL);
    m_scrollBar->SetScrollbar(0, 1, 100, 1);
    box_sizer_2->Add(m_scrollBar, wxSizerFlags(1).Expand().Border(wxALL));

    parent_sizer3->Add(box_sizer_2, wxSizerFlags().Border(wxALL));

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);

    staticText_2 = new wxStaticText(wizPage2, wxID_ANY, "Normal SpinCtrl");
    box_sizer_3->Add(staticText_2, wxSizerFlags().Border(wxALL));

    m_spinCtrl = new wxSpinCtrl(wizPage2, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100,
        4);
    m_spinCtrl->SetValidator(wxGenericValidator(&m_spinValidate));
    box_sizer_3->Add(m_spinCtrl, wxSizerFlags().Border(wxALL));

    parent_sizer3->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto* box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);

    staticText_3 = new wxStaticText(wizPage2, wxID_ANY, "Double SpinCtrl");
    box_sizer_4->Add(staticText_3, wxSizerFlags().Border(wxALL));

    m_spinCtrlDouble = new wxSpinCtrlDouble(wizPage2);
    box_sizer_4->Add(m_spinCtrlDouble, wxSizerFlags().Border(wxALL));

    parent_sizer3->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto* box_sizer_5 = new wxBoxSizer(wxHORIZONTAL);

    staticText_4 = new wxStaticText(wizPage2, wxID_ANY, "Spin Button");
    box_sizer_5->Add(staticText_4, wxSizerFlags().Border(wxALL));

    m_spinBtn = new wxSpinButton(wizPage2);
    m_spinBtn->SetRange(0, 10);
    box_sizer_5->Add(m_spinBtn, wxSizerFlags().Border(wxALL));

    parent_sizer3->Add(box_sizer_5, wxSizerFlags().Border(wxALL));

    box_sizer2->Add(parent_sizer3, wxSizerFlags().Border(wxALL));
    wizPage2->SetSizerAndFit(box_sizer2);

    auto* wizPage3 = new wxWizardPageSimple(this, nullptr, nullptr, wxue_img::bundle_wiztest2_png());

    auto* box_sizer3 = new wxBoxSizer(wxVERTICAL);

    m_staticText3 = new wxStaticText(wizPage3, wxID_ANY, "This is the final Wizard page");
    box_sizer3->Add(m_staticText3, wxSizerFlags().Border(wxALL));

    auto* box_sizer_6 = new wxBoxSizer(wxHORIZONTAL);

    m_hyperlink = new wxHyperlinkCtrl(wizPage3, wxID_ANY, "Blank Page", "https://blank.page/");
    box_sizer_6->Add(m_hyperlink, wxSizerFlags().Center().Border(wxALL));

    m_searchCtrl = new wxSearchCtrl(wizPage3, wxID_ANY, wxEmptyString);
    m_searchCtrl->SetHint("Search for something...");
    m_searchCtrl->ShowSearchButton(true);
    m_searchCtrl->ShowCancelButton(true);
    box_sizer_6->Add(m_searchCtrl, wxSizerFlags(1).Border(wxALL));

    box_sizer3->Add(box_sizer_6, wxSizerFlags().Expand().Border(wxALL));

    auto* bmp = new wxStaticBitmap(wizPage3, wxID_ANY, wxBitmapBundle::FromBitmap(wxueImage(wxue_img::hide_png, sizeof(wxue_img::hide_png))));
    box_sizer3->Add(bmp, wxSizerFlags().Border(wxALL));
    wizPage3->SetSizerAndFit(box_sizer3);

    wizPage->Chain(wizPage2).Chain(wizPage3);
    GetPageAreaSizer()->Add(wizPage);
    Center(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &Wizard::OnInit, this);
    Bind(wxEVT_WIZARD_BEFORE_PAGE_CHANGED, &Wizard::OnBeforeChange, this);

}

namespace wxue_img
{
    // ../art/hide.png
    const unsigned char hide_png[242] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,24,8,6,0,0,0,224,119,61,248,0,0,0,9,112,72,89,115,
        0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,164,73,68,65,84,72,199,237,149,75,2,128,32,8,68,25,239,127,103,90,212,
        66,17,100,176,218,201,14,133,158,124,19,57,146,8,140,174,34,34,170,122,95,2,248,5,208,67,30,16,235,79,25,84,33,
        75,80,116,225,66,38,231,25,138,82,4,12,196,1,13,74,219,73,143,213,205,3,52,162,165,31,183,231,54,50,47,146,86,73,
        135,133,37,145,12,17,104,104,224,116,79,161,38,104,236,192,20,90,86,188,34,35,115,180,57,143,108,251,215,83,69,
        206,192,11,40,232,85,177,1,65,121,85,48,93,213,157,35,26,180,145,14,208,5,13,107,146,53,79,117,61,63,243,1,122,
        221,38,32,4,54,175,255,35,159,69,124,68,46,21,182,88,38,116,19,247,168,0,0,0,0,73,69,78,68,174,66,96,130
    };

    }

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Multiple Tests dialog
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"  // MainFrame -- Main window

void MainFrame::OnWizard(wxCommandEvent& WXUNUSED(event))
{
    Wizard wizard(this);
    wizard.Run();
}

void Wizard::OnBeforeChange(wxWizardEvent& event)
{
    event.Skip();
}

void Wizard::OnInit(wxInitDialogEvent& event)
{
    event.Skip();  // transfer all validator data to their windows and update UI
}
