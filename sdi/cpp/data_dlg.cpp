///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/colour.h>
#include <wx/panel.h>
#include <wx/settings.h>
#include <wx/sizer.h>

#include "data_dlg.h"

bool DataDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_notebook = new wxNotebook(this, wxID_ANY);
    dlg_sizer->Add(m_notebook, wxSizerFlags().Border(wxALL));

    auto* grid_tab = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(grid_tab, "Grid");

    auto* page_sizer_2 = new wxBoxSizer(wxVERTICAL);

    m_kicadGrid = new wxGrid(grid_tab, wxID_ANY);
    {
        m_kicadGrid->CreateGrid(2, 11);
        m_kicadGrid->EnableDragGridSize(false);
        m_kicadGrid->SetMargins(0, 0);
        {
            wxFontInfo font_info(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT).GetPointSize());
            m_kicadGrid->SetLabelFont(wxFont(font_info));
        }

        m_kicadGrid->SetDefaultCellAlignment(wxALIGN_LEFT, wxALIGN_TOP);
        m_kicadGrid->SetColLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
        m_kicadGrid->SetColLabelSize(24);
        m_kicadGrid->SetColSize(0, 124);
        m_kicadGrid->SetColSize(1, 60);
        m_kicadGrid->SetColSize(2, 110);
        m_kicadGrid->SetColSize(3, 110);
        m_kicadGrid->SetColSize(4, 110);
        m_kicadGrid->SetColSize(5, 60);
        m_kicadGrid->SetColSize(6, 110);
        m_kicadGrid->SetColSize(7, 110);
        m_kicadGrid->SetColSize(8, 110);
        m_kicadGrid->SetColSize(9, 110);
        m_kicadGrid->SetColSize(10, 110);
        m_kicadGrid->SetColLabelValue(0, "Text Items");
        m_kicadGrid->SetColLabelValue(1, "Show");
        m_kicadGrid->SetColLabelValue(2, "Width");
        m_kicadGrid->SetColLabelValue(3, "Height");
        m_kicadGrid->SetColLabelValue(4, "Thickness");
        m_kicadGrid->SetColLabelValue(5, "Italic");
        m_kicadGrid->SetColLabelValue(6, "Layer");
        m_kicadGrid->SetColLabelValue(7, "Orientation");
        m_kicadGrid->SetColLabelValue(8, "Unconstrained");
        m_kicadGrid->SetColLabelValue(9, "X Offset");
        m_kicadGrid->SetColLabelValue(10, "Y Offset");

        m_kicadGrid->EnableDragRowSize(false);
        m_kicadGrid->SetRowLabelAlignment(wxALIGN_LEFT, wxALIGN_CENTER);
        m_kicadGrid->SetRowLabelSize(160);
        m_kicadGrid->SetRowLabelValue(0, "Reference designator");
        m_kicadGrid->SetRowLabelValue(1, "Value");
    }
    m_kicadGrid->SetMinSize(FromDIP(wxSize(800, 140)));
    page_sizer_2->Add(m_kicadGrid, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));
    grid_tab->SetSizerAndFit(page_sizer_2);

    auto* prop_grid_tab = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(prop_grid_tab, "PropertyGrid");

    auto* page_sizer_4 = new wxBoxSizer(wxVERTICAL);

    m_propertyGrid = new wxPropertyGrid(prop_grid_tab, wxID_ANY);
    page_sizer_4->Add(m_propertyGrid, wxSizerFlags().Expand().Border(wxALL));

    m_propertyGridICategory = m_propertyGrid->Append(new wxPropertyCategory("CategoryName", "CategoryName"));

    m_pgi_string = m_propertyGrid->Append(new wxStringProperty("String", wxEmptyString));

    m_pgi_integer = m_propertyGrid->Append(new wxIntProperty("Integer", wxEmptyString));
    prop_grid_tab->SetSizerAndFit(page_sizer_4);

    auto* tree_tab = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(tree_tab, "Trees");

    auto* page_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer->AddGrowableCol(0);
        flex_grid_sizer->AddGrowableCol(1);
    }

    m_static_text = new wxStaticText(tree_tab, wxID_ANY, "wxTreeCtrl");
    flex_grid_sizer->Add(m_static_text, wxSizerFlags(1).Expand().Border(wxALL));

    m_static_text2 = new wxStaticText(tree_tab, wxID_ANY, "wxTreeListCtrl");
    flex_grid_sizer->Add(m_static_text2, wxSizerFlags(1).Expand().Border(wxALL));

    m_tree_ctrl = new wxTreeCtrl(tree_tab, wxID_ANY);
    flex_grid_sizer->Add(m_tree_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    m_tree_list_ctrl = new wxTreeListCtrl(tree_tab, wxID_ANY);
    flex_grid_sizer->Add(m_tree_list_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    m_tree_list_ctrl->AppendColumn("Column 1", wxCOL_WIDTH_AUTOSIZE);

    m_tree_list_ctrl->AppendColumn("Column 2", wxCOL_WIDTH_AUTOSIZE);

    page_sizer_3->Add(flex_grid_sizer, wxSizerFlags(1).Expand().Border(wxALL));
    tree_tab->SetSizerAndFit(page_sizer_3);

    auto* dataview_tab = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(dataview_tab, "DataView");
    dataview_tab->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto* page_sizer = new wxBoxSizer(wxVERTICAL);

    auto* flex_grid_sizer2 = new wxFlexGridSizer(3, 0, 0);
    {
        flex_grid_sizer2->AddGrowableCol(0);
        flex_grid_sizer2->AddGrowableCol(1);
        flex_grid_sizer2->AddGrowableCol(2);
    }

    auto* static_text3 = new wxStaticText(dataview_tab, wxID_ANY, "wxDataView");
    flex_grid_sizer2->Add(static_text3, wxSizerFlags().Expand().Border(wxALL));

    m_static_text5 = new wxStaticText(dataview_tab, wxID_ANY, "wxDataViewList");
    flex_grid_sizer2->Add(m_static_text5, wxSizerFlags().Expand().Border(wxALL));

    m_static_text4 = new wxStaticText(dataview_tab, wxID_ANY, "wxDataViewtree");
    flex_grid_sizer2->Add(m_static_text4, wxSizerFlags().Expand().Border(wxALL));

    m_data_view_ctrl = new wxDataViewCtrl(dataview_tab, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxDV_SINGLE);
    flex_grid_sizer2->Add(m_data_view_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    m_data_view_column = m_data_view_ctrl->AppendTextColumn("Column 1", 0, wxDATAVIEW_CELL_INERT, -1,
        static_cast<wxAlignment>(wxALIGN_LEFT), wxDATAVIEW_COL_RESIZABLE);

    m_data_view_column2 = m_data_view_ctrl->AppendTextColumn("Column 2", 0, wxDATAVIEW_CELL_INERT, -1,
        static_cast<wxAlignment>(wxALIGN_LEFT), wxDATAVIEW_COL_RESIZABLE);

    m_data_view_list_ctrl = new wxDataViewListCtrl(dataview_tab, wxID_ANY);
    m_data_view_list_ctrl->SetMinSize(FromDIP(wxSize(-1, 100)));
    flex_grid_sizer2->Add(m_data_view_list_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    m_data_view_list_column = m_data_view_list_ctrl->AppendTextColumn("List 1", wxDATAVIEW_CELL_INERT, -1,
        static_cast<wxAlignment>(wxALIGN_LEFT), wxDATAVIEW_COL_RESIZABLE);

    m_data_view_list_column2 = m_data_view_list_ctrl->AppendTextColumn("List 2", wxDATAVIEW_CELL_INERT, -1,
        static_cast<wxAlignment>(wxALIGN_LEFT), wxDATAVIEW_COL_RESIZABLE);

    m_data_view_tree_ctrl = new wxDataViewTreeCtrl(dataview_tab, wxID_ANY);
    flex_grid_sizer2->Add(m_data_view_tree_ctrl, wxSizerFlags(1).Expand().Border(wxALL));

    page_sizer->Add(flex_grid_sizer2, wxSizerFlags(1).Expand().Border(wxALL));
    dataview_tab->SetSizerAndFit(page_sizer);

    auto* box_sizer_14 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_4 = new wxStaticText(this, wxID_ANY, "Events:");
    box_sizer_14->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    auto* btn = new wxButton(this, wxID_ANY, "Clear Events");
    box_sizer_14->Add(btn, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(box_sizer_14, wxSizerFlags().Border(wxALL));

    m_events_list = new wxListBox(this, wxID_ANY);
    m_events_list->SetMinSize(FromDIP(wxSize(-1, 150)));
    dlg_sizer->Add(m_events_list, wxSizerFlags(1).Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    btn->Bind(wxEVT_BUTTON, &DataDlg::OnClearList, this);
    m_data_view_list_ctrl->Bind(wxEVT_DATAVIEW_SELECTION_CHANGED, &DataDlg::OnDataViewCtrlSelectionChanged, this);
    m_data_view_tree_ctrl->Bind(wxEVT_DATAVIEW_SELECTION_CHANGED, &DataDlg::OnDataViewCtrlSelectionChanged, this);
    m_kicadGrid->Bind(wxEVT_GRID_COL_SIZE, &DataDlg::OnColumnResize, this);
    Bind(wxEVT_INIT_DIALOG, &DataDlg::OnInit, this);
    m_propertyGrid->Bind(wxEVT_PG_CHANGED, &DataDlg::OnChanged, this);
    m_propertyGrid->Bind(wxEVT_PG_SELECTED, &DataDlg::OnSelected, this);
    m_kicadGrid->Bind(wxEVT_SIZE, &DataDlg::OnGridSize, this);
    m_tree_list_ctrl->Bind(wxEVT_TREELIST_SELECTION_CHANGED, &DataDlg::OnTreeListSelChanged, this);
    m_tree_ctrl->Bind(wxEVT_TREE_ITEM_EXPANDED, &DataDlg::OnTreeItemExpanded, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Author:    Ralph Walden
// Copyright: Copyright (c) 2024 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"

void MainFrame::OnDataDlg(wxCommandEvent& WXUNUSED(event))
{
    DataDlg dlg(this);
    dlg.ShowModal();
}

void DataDlg::OnInit(wxInitDialogEvent& event)
{
    m_kicadGrid->SetCellValue(0, 0, "cat");
    m_kicadGrid->SetCellValue(0, 1, "dog");

    m_pgi_string->SetValue("cats");
    m_pgi_integer->SetValue(3);

    {
        auto root = m_tree_ctrl->AddRoot("Root");
        auto child = m_tree_ctrl->AppendItem(root, "Child #1");
        m_tree_ctrl->AppendItem(child, "Grandchild");
        m_tree_ctrl->AppendItem(root, "Child #2");
    }

    {
        auto root = m_tree_list_ctrl->GetRootItem();
        m_tree_list_ctrl->AppendItem(root, "Cat #1");
        m_tree_list_ctrl->SetItemText(m_tree_list_ctrl->AppendItem(root, "Cat #2"), 1, "Dog");
    }

    {
        auto root = m_data_view_tree_ctrl->AppendContainer(wxDataViewItem(0), "The Root");
        m_data_view_tree_ctrl->AppendItem(root, "Child 1");
        m_data_view_tree_ctrl->AppendItem(root, "Child 2");
        m_data_view_tree_ctrl->AppendItem(root, "Child 3, very long, long, long, long");
    }

    {
        wxVector<wxVariant> data;
        data.push_back(wxVariant("cat"));
        data.push_back(wxVariant("dog"));
        m_data_view_list_ctrl->AppendItem(data);
    }

    event.Skip();  // transfer all validator data to their windows and update UI
}

void DataDlg::OnGridSize(wxSizeEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_SIZE");
}

void DataDlg::OnColumnResize(wxGridSizeEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_SIZE");
}

void DataDlg::OnChanged(wxPropertyGridEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_PG_CHANGED");
}

void DataDlg::OnTreeListSelChanged(wxTreeListEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_TREELIST_SELECTION_CHANGED");
}

void DataDlg::OnTreeItemExpanded(wxTreeEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_TREE_ITEM_EXPANDED");
}

void DataDlg::OnDataViewCtrlSelectionChanged(wxDataViewEvent& WXUNUSED(event))
{
    OnEventName("wxEVT_DATAVIEW_SELECTION_CHANGED");
}

void DataDlg::OnClearList(wxCommandEvent& WXUNUSED(event))
{
    m_events_list->Clear();
}

void DataDlg::OnEventName(const std::string& event_name)
{
    m_events_list->Select(m_events_list->Append(wxString().FromUTF8(event_name)));
}
