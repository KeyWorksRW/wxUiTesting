///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include "wxue_data.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

namespace wxue_data
{
    // Convert compressed data string into a char array
    std::unique_ptr<unsigned char[]> get_data(const unsigned char* data,
        size_t size_data, size_t size_data_uncompressed)
    {
        auto str = std::unique_ptr<unsigned char[]>(new unsigned char[size_data_uncompressed]);
        wxMemoryInputStream stream_in(data, size_data);
        wxZlibInputStream zlib_strm(stream_in);
        zlib_strm.Read(str.get(), size_data_uncompressed);
        return str;
    };

    // xrc/python_dlg.xrc (3734 bytes)
    const unsigned char xrc_python_dlg[1053] {
            120,218,189,87,221,114,226,54,20,238,163,184,238,69,111,54,118,66,38,211,157,174,226,173,1,39,97,226,98,10,78,155,
            237,141,70,216,194,168,145,127,198,22,177,211,217,23,234,115,244,197,246,200,198,34,144,64,2,217,221,27,124,126,
            116,116,62,29,157,31,129,114,90,164,139,60,160,90,21,243,164,56,215,231,66,100,191,154,102,89,150,70,89,149,44,
            140,168,40,140,52,143,204,178,170,242,64,215,238,105,94,176,52,57,215,59,198,153,113,106,28,235,22,74,167,255,208,
            64,104,1,39,5,108,80,86,125,70,120,26,233,90,66,98,122,174,143,30,196,60,77,250,60,130,149,130,9,78,173,43,202,
            121,170,53,114,173,89,252,35,50,27,29,42,196,3,124,96,19,231,194,190,113,125,220,31,216,174,119,137,39,254,39,215,
            65,102,163,69,1,77,4,205,105,104,157,32,83,209,79,112,116,211,106,194,254,165,121,139,100,90,115,39,18,113,206,
            192,10,188,252,233,140,253,65,207,118,145,185,20,109,108,82,72,11,38,104,12,70,51,78,34,48,177,93,247,115,89,57,
            183,35,123,216,71,102,45,68,211,52,15,105,110,157,33,115,73,189,140,37,173,112,189,249,219,209,188,30,132,189,96,
            126,154,242,46,81,48,200,74,98,161,140,4,119,44,137,100,80,91,18,21,52,35,57,17,112,227,114,227,71,156,186,40,251,
            102,128,253,46,30,185,246,96,136,187,118,239,250,114,236,221,12,251,159,149,166,189,201,245,43,92,199,198,201,148,
            242,22,148,0,68,0,167,150,89,174,252,69,102,195,160,41,19,49,201,180,66,164,193,29,102,97,125,168,177,143,255,184,
            113,38,254,192,27,234,75,77,192,101,248,90,173,239,121,110,215,30,235,166,5,129,173,221,110,186,175,61,62,242,142,
            59,202,255,132,146,60,152,67,44,20,6,185,64,176,204,242,231,172,208,36,163,21,243,116,193,67,109,74,53,150,48,1,
            9,205,31,180,144,21,100,202,105,104,64,102,47,13,16,79,147,104,78,249,30,166,202,98,121,114,203,48,76,146,11,115,
            150,38,98,196,130,59,154,27,89,18,125,120,34,253,237,4,119,206,170,173,186,29,170,95,182,234,58,181,2,178,171,65,
            178,45,150,5,228,14,109,131,9,97,132,30,34,230,214,201,49,50,27,106,155,93,89,77,50,150,244,68,174,110,162,104,
            121,11,197,44,177,96,7,249,65,49,169,96,59,201,1,129,238,9,95,80,169,107,8,149,150,147,17,182,199,99,239,47,124,
            237,124,154,168,172,83,190,159,18,175,42,124,153,213,238,224,114,136,123,206,208,119,198,248,202,27,15,254,246,
            134,190,189,71,21,78,4,84,80,224,211,74,180,7,141,113,177,146,181,137,87,86,203,14,73,11,161,69,255,255,151,64,
            114,104,201,207,192,29,65,183,206,72,241,81,101,100,153,195,125,28,65,217,214,196,170,50,183,33,93,6,35,75,11,25,
            200,119,157,51,8,159,100,144,60,181,117,10,162,247,32,169,25,136,111,206,8,180,34,78,242,136,202,40,55,44,154,69,
            214,79,199,199,239,143,229,69,0,125,96,64,191,66,3,237,60,238,160,143,79,249,109,122,104,115,123,221,186,6,20,150,
            56,211,85,111,10,233,140,44,184,168,193,157,235,167,157,119,167,128,112,6,53,113,84,196,140,83,163,184,127,174,
            134,190,81,212,182,160,237,232,155,13,101,206,66,186,165,188,191,47,180,211,39,208,4,139,155,54,183,11,219,119,
            66,187,145,132,77,217,98,153,139,157,221,131,188,100,73,152,150,203,122,221,220,188,55,167,193,29,236,189,234,7,
            129,148,140,56,121,176,19,22,215,3,87,245,5,41,213,148,88,245,128,85,0,118,184,122,107,20,252,52,138,56,237,46,
            132,0,64,10,172,104,164,226,69,140,109,99,234,222,96,231,214,238,249,23,3,127,71,103,254,202,111,159,22,205,227,
            9,19,99,210,138,113,208,76,26,213,60,123,91,30,46,202,194,10,120,142,97,124,231,145,244,97,68,108,134,204,149,18,
            177,132,4,130,221,211,163,101,210,170,169,94,103,242,166,246,85,41,125,64,140,92,231,194,135,161,53,30,92,94,201,
            175,239,141,222,242,120,125,219,91,181,235,249,190,247,251,1,254,155,226,115,89,66,215,222,112,7,206,240,67,252,
            135,205,223,148,38,243,215,90,128,156,221,97,147,251,235,102,211,166,74,158,137,230,90,249,148,213,160,143,189,
            107,88,183,28,28,242,249,221,146,47,30,113,31,39,61,215,155,56,59,30,193,123,237,5,51,214,185,245,241,149,227,142,
            84,213,127,124,166,25,237,69,180,255,69,173,31,190,0,62,158,36,81
        };

    std::string get_xrc_python_dlg()
    {
        return std::string((const char*) get_data(xrc_python_dlg, sizeof(xrc_python_dlg), 3734).get(), 3734);
    }
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
