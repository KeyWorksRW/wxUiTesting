###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'
require 'wx/aui'
require 'wx/rbn'

$rbn_tool1 = 6000
$rbn_tool2 = 6001
$rbn_tool3 = 6002
$rbn_tool_art = 6003
$rbn_tool_list = 6004
$rbn_tool_svg = 6005

require 'zlib'
require 'base64'
require 'stringio'
require_relative 'images'

class ToolBarsDialog < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title = 'Test Dialog',
                 pos = Wx::DEFAULT_POSITION, size = Wx::DEFAULT_SIZE,
                 style = Wx::DEFAULT_DIALOG_STYLE)

    super(parent, id, title, pos, size, style)

    box_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    @tool_bar = Wx::ToolBar.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TB_HORIZONTAL)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    @tool_svg = @tool_bar.add_tool(Wx::ID_ANY, '', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)))

    @tool_bar.add_tool(Wx::ID_ANY, '', Wx::ArtProvider.get_bitmap_bundle(
      Wx::ART_CUT, Wx::ART_TOOLBAR))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($undo_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($redo_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png))

    @tool_bar.realize
    box_sizer.add(@tool_bar, Wx::SizerFlags.new.border(Wx::ALL))

    @aui_tool_bar = Wx::AUI::AuiToolBar.new(self, Wx::ID_ANY,
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::AUI::AUI_TB_PLAIN_BACKGROUND|
      Wx::AUI::AUI_TB_DEFAULT_STYLE)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    @aui_tool_svg = @aui_tool_bar.add_tool(Wx::ID_ANY, '', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', Wx::ArtProvider.get_bitmap_bundle(
      Wx::ART_CUT, Wx::ART_TOOLBAR))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($redo_png))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png))
    @aui_tool_bar.realize
    box_sizer.add(@aui_tool_bar, Wx::SizerFlags.new.border(Wx::ALL))

    @rbnBar = Wx::RBN::RibbonBar.new(self, Wx::ID_ANY)

    @rbnBar.set_art_provider(Wx::RBN::RibbonDefaultArtProvider.new)
    box_sizer.add(@rbnBar, Wx::SizerFlags.new.border(Wx::ALL))

    rbnPage = Wx::RBN::RibbonPage.new(@rbnBar, Wx::ID_ANY, 'Page 1')

    rbnPanel = Wx::RBN::RibbonPanel.new(rbnPage, Wx::ID_ANY, 'Tool Panel')

    rbnToolBar = Wx::RBN::RibbonToolBar.new(rbnPanel, Wx::ID_ANY)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    rbnToolBar.add_tool($rbn_tool_svg, Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)).get_bitmap(Wx::DEFAULT_SIZE), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool_art, Wx::ArtProvider.get_bitmap(Wx::ART_CUT,
      Wx::ART_TOOLBAR), '', Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool1, wxue_get_bundle($undo_png).get_bitmap(
        Wx::Size.new(from_dip(24), from_dip(24))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool2, wxue_get_bundle($redo_png).get_bitmap(
        Wx::Size.new(from_dip(24), from_dip(24))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool3, wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png).get_bitmap(
        Wx::Size.new(from_dip(16), from_dip(16))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool_list, wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png).get_bitmap(
        Wx::Size.new(from_dip(22), from_dip(22))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.realize

    rbn_panel2 = Wx::RBN::RibbonPanel.new(rbnPage, Wx::ID_ANY, 'Button Panel')

    rbn_btn_bar = Wx::RBN::RibbonButtonBar.new(rbn_panel2, Wx::ID_ANY)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    rbn_btn_bar.add_button(Wx::ID_ANY, 'rbn_btn_svg', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)).get_bitmap(Wx::DEFAULT_SIZE), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbn_btn_bar.add_button(Wx::ID_ANY, 'rbn_btn_art', Wx::ArtProvider.get_bitmap(
      Wx::ART_CUT, Wx::ART_TOOLBAR), '', Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbn_btn_bar.add_button(Wx::ID_ANY, 'rbn_btn1', wxue_get_bundle($undo_png)
      .get_bitmap(
        Wx::Size.new(from_dip(24), from_dip(24))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbn_btn_bar.realize

    set_min_size(from_dip(Wx::Size.new(400, -1)))
    set_sizer_and_fit(box_sizer)
    centre(Wx::BOTH)

    # Event handlers
    evt_init_dialog(:on_init)
    evt_tool(@tool_svg.get_id, :OnTool)
  end

# ../art/left.svg
$left_svg = (
  'eNqFlUtzmzAQx/tRNOqlnbEVrSQkcIwPPbWHXnvIjYTnBBsPUCfup+8KkZiHseXHALv66b/a' +
  'XbFtThk5JXVTVIeQAgNKijik+BQ015S8FXGbh1QKSvKkyPLWXZ+K5O1H9R5STjiRAr90t42T' +
  'tOlm2wvQwOnDbpuR4vDavETHZJPV1d/jvoqTkJbROanpxVRGz0kZ0l/7KEucAlwfLDTr76Qv' +
  'JSVtHR2atKr3Id1HbV28fwPGDSjh6xXHD94FxtOwWmMo+NQz3WUgtC8C+R15x6jNSdOeS1QR' +
  'F80RlWyKQ1kckse0KMvNV44jTR+btq5ek3UX/wYYLi9wfZTym4iV8JmWOBT5Q4RhQuMw5CeR' +
  'TAbdIIr51vbpJ/nILMgT2aOTsKtxWPEJyDBNAsaddQ6yZv0xuUeBQyPqRDBk6VA5Aaa63wSS' +
  'Wyfl/v45LTMVoFm/BJg5YWRXqOhpASO4kwpEALrNMBc7+LhtixjFVI/xru3uwC6XITjHOUl+' +
  'BfFptXM6CF+tcW+tq2SwRFHMcxRUFtzhAOZ1icOZ6jmAEd7hKBYscDAv0nEwb+YW56O+gDN/' +
  'CSaY6GgEJGZvGca7+rP51cxYmPbnNJ9BLy1gXl88V5C2yZAo3cK4M6wDXm2yi5+HRXq3ywak' +
  'aZdNSbfbbMgattmYsthnAx2zPpsKudVoA86s0aacW5025Ew7bcZZbLUhZZz5GWOSc3fs2+MZ' +
  '8ECfvxviqm3sC+XuAZ6mFtvdrKtj9FK05w2Mz3POuFC+VpcTHXdYeH0ZoD5XP7aWBDfCSIPy' +
  'FShPGeX6q3cWZuQ0DkN6YOZx1Elsw3jI+h++andf/gNQMqyX')

# ../art/undo.png
$undo_png = Base64.decode64(
  'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwY' +
  'AAADdElEQVRIx+2VT2hdRRTGf2dm3n33vveCtkqERGsTUzTd1IYuBMVautSlINiFUFDBohQp' +
  'VFGhOxWhlG4siApiQchCUJdKaUGKbkqKQpW26Z8YaVOTtEnz3r13Zo6Lm6QJSY3WleCBYc5l' +
  '5nzf/c6cOQP/dZO1Ngwfn1CdC2hQVBUFUMAImhme33mf3BHBR9+MqZmjAtWlM8u/Ad8Q9j67' +
  'Qf42waEvLmuY9fMAt4BWgM/7MYJpOd7ZvVHWJDjw6ajGaV8Bzg8UQvSI2FtEUYkLZLGaZV3C' +
  'wVcektsSvHh4RBvXE5Al4CI80F1QlIHfJ7Nlfx+XgMdQ+cW9JUf3bV3EdcvYZlNuzJUVgQgI' +
  '9Pd49ux6mEOfn2Umj/igtPNIJw/kRaQsFV9GQlAkKvWpZFlGFgl2vHVKJ690wAgYiAoDvZ7X' +
  'XxgkSxPOjnc4NuIpfKVNFYiKxnkVIVaVdrnNlndHdeTNPlmh4MKVnJtFZK6I9PdE3n5piCxN' +
  'UFU+eHWAoiwBCBFGxzt8eWKC4eNtSm/QYFAfiV6ZG7+5UsGlScf1q7OYmkGcwSSG0pfkebXu' +
  'QyAEXTy5rY+sY9vme3hyyxivfTiJ9wb1gvi4eorECbZuMTWDqRl+vWbYc/gXDr68kayesO/j' +
  'UU5esIuB3c2C93d189RQNzsenebYz4ZYClIuL0yz4NhEMHWLTS02c9jM8eNvKXs/ucj0jVlI' +
  'LK6V4rpSXCvlD7o48t0keZEztCldjLGpW11BvdbG1i22biqixGISw+nphP3DVwkx4FoOkaqG' +
  'NSq55JRlibGKazhiEQjmNgpOv7dNbGqxqcNlDtewuIbDNRxn8rs5F9dTa9Wq0VWj1nJsH1DK' +
  'ouT8VMA13HysXV0BQFdfi3yyqNJUt9jM0t+a4fH7FZHq0i1YbzMw9GAXY9dmOTmR4RoOMULS' +
  '02Dkjb7VL9pPBzbJ4P4zalOHzSwuc2xYLzyzOV3Rr0of+OHiDEfPN/HNBs4GxAh39SV/3Yse' +
  'O3JO21OmkpxZ0lpJs1ZinME4qVSoMhcshWkS8kDoBHzbkzY93+/ukzW76ROfXdKiU+XfNWuL' +
  'hy81gxiBqESvhCIQ2oHQ9lhbcOK5XvlHD872r6bVJgbbcLjUYeoVgUYllpHQCcQ88O3Oltzx' +
  'iwbw9KlSxRnESVWmVB3060Ej/G//1v4EvrC4VZwjYRAAAAAASUVORK5CYII=')

# ../art/redo.png
$redo_png = Base64.decode64(
  'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwY' +
  'AAADY0lEQVRIx+2VTWgdVRTHf+fcO/Pe5IO0hQgtVWxNQaiQJrsitAqFbvxAoSAEBBdKRRCp' +
  'i2xEilLqQkEsSEUsbiqI7sRlEUHRRbFQhNDWJLUxkaatiTXvvcybufe4mNfXpE2s1pXghcsM' +
  'w5n/757PC//1JXcy+OTUZZNWhGgg1Q8igjhBehwH9g7KXQHe/fyS+aZ1BDuiwoot3Wfsgecf' +
  '2yp/G/DmiYsWl0pUbxVe8X4DTPXN9XleeeZeuSPg0PuTZgvtSqwDUAFR6QqbBZz6myHrbN3g' +
  'OfzcNlkXMPb2GUuvJoiCOulC9BYvNm9qkSaOmfkUzLoADJoDbT58ebir61cCZi5AvtjAVHBO' +
  '8ImSJEItVeo1R1ZTvBO2+ISXxoZ45+NzTM15MBAzMEhcfe0QDR+dtktf/FxVhxPEaRUiFeiE' +
  'B4TUC/tGPR+9PkqzlfPG8Ql+mvWoABGIxrW+yFdHRmSVB825Bpo61AviFXFC4iMH9mY8tWeQ' +
  'bVvqOK1s0yTBzMjqKa+98CBPvvoDU3NKT6r0pkp/X8KaIXJ1Rb0iXvHeeO/FQfbv3kqIkcXr' +
  'TUKo7EoN5HkOQFEWaKosm9BqBK4sFgxszNYB1ByaKJooj+6MPDJ6D6cnLjN+cp75Rtq1231/' +
  '4NjBIVp5m0MfXOT81RRfj8RCqmrzsp4HHk0rwOgOJW/nHD/1G9fox/fdqFEgXWbx+hLjJ3/l' +
  '9Gwdl0XER8QFUMGl6wIcrqZVLlygKApyUZLepEq2gJnRCiXjn81zdrEf3xuJ7UhoB0Sr7qsl' +
  'rbUBPnNo6nB1x9RCm6JdsHfImDzvkU6GzYzJsIlYSFc8+oA4IYiABM6+NXJ7H1w49pAMH522' +
  '9u9tXOb47krG01eX2L+zn8G+BWYb7uZJzDCDb38Rppb6CVoJA/RsyVb1wSoPBranLJyLuJqj' +
  'rNc4cqbJ2PY/2LW5zi7vbptZM82cGavCJ6469I+Hd8hfzqKHT0zbcsPjM9/JiSONDXpcqGaF' +
  'GbE0YhlpFAnLRUJoBcpmSbYx8v3BB+SO03TPp7MWQorLPC5zuE4DooJFw4pIyCMhD5SNgrJZ' +
  'ktZLvnn2PvlHF86+U0umtSrpmijSAcQ8Ui6XlM2S2I58/cQGuesbDeDxiWgisiLHRlwOfDmS' +
  'CP+vf7v+BCTXR/QXGtTnAAAAAElFTkSuQmCC')

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

  def OnTool(event)
    event.skip
  end

  def on_init(event)
    event.skip
  end

end
