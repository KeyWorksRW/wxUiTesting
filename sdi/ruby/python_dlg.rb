###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'
require 'wx/aui'

require_relative 'images'
require 'zlib'
require 'base64'
require 'stringio'

class PythonDlg < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title = 'Hello Python Dialog!',
                 pos = Wx::DEFAULT_POSITION, size = Wx::DEFAULT_SIZE,
                 style = Wx::DEFAULT_DIALOG_STYLE)

    super(parent, id, title, pos, size, style)

    bSizer1 = Wx::BoxSizer.new(Wx::VERTICAL)

    box_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    @auiToolBar = Wx::AUI::AuiToolBar.new(self, Wx::ID_ANY,
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::AUI::AUI_TB_PLAIN_BACKGROUND|
      Wx::AUI::AUI_TB_DEFAULT_STYLE)
    @auiToolBar.add_label(Wx::ID_ANY, 'Label')
    tool_2 = @auiToolBar.add_tool(Wx::ID_ANY, 'Search', wxue_get_bundle($fontPicker_png,
      $fontPicker_1_25x_png, $fontPicker_1_5x_png), Wx::NULL_BITMAP,
      Wx::ITEM_NORMAL, 'This tool should be initially disabled.',
      'This tool should be initially disabled.', nil)
    tool_2.set_state(Wx::AUI::AUI_BUTTON_STATE_NORMAL|
      Wx::AUI::AUI_BUTTON_STATE_DISABLED)
    @auiToolBar.add_spacer(@auiToolBar.from_dip(10))

    @spinCtrl = Wx::SpinCtrl.new(@auiToolBar)
    @auiToolBar.add_control(@spinCtrl)
    @auiToolBar.realize
    box_sizer.add(@auiToolBar, Wx::SizerFlags.new.border(Wx::ALL))

    @staticText = Wx::StaticText.new(self, Wx::ID_ANY,
      'wxPython est gÃ©nial n\'est-ce pas?', from_dip(Wx::Point.new(100, 250)),
      from_dip(Wx::Size.new(300, 80)), Wx::ALIGN_CENTER_HORIZONTAL, name=
    'my_text')
    @staticText.set_window_variant(Wx::WINDOW_VARIANT_LARGE)
    @staticText.set_foreground_colour(Wx::Colour.new('#008000'))
    box_sizer.add(@staticText, Wx::SizerFlags.new.center.border(Wx::ALL))

    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($face_smile_svg))
    bmp = Wx::StaticBitmap.new(self, Wx::ID_ANY, Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(32, 32)))
    box_sizer.add(bmp, Wx::SizerFlags.new.border(Wx::ALL))

    @checkPlayAnimation = Wx::CheckBox.new(self, Wx::ID_ANY, 'Play Animation')
    static_box_2 = Wx::StaticBoxSizer.new(Wx::StaticBox.new(self, Wx::ID_ANY, @checkPlayAnimation
      ), Wx::VERTICAL)

    @toggleBtn = Wx::ToggleButton.new(static_box_2.get_static_box, Wx::ID_ANY,
      'Play Animation', Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::BU_EXACTFIT)
    static_box_2.add(@toggleBtn, Wx::SizerFlags.new.border(Wx::ALL))

    @animation_ctrl = Wx::AnimationCtrl.new(static_box_2.get_static_box,
      Wx::ID_ANY, get_animation($clr_hourglass_gif), Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::AC_DEFAULT_STYLE)
    @animation_ctrl.set_inactive_bitmap(wxue_get_bundle($disabled_png))
    static_box_2.add(@animation_ctrl, Wx::SizerFlags.new.border(Wx::ALL))

    box_sizer.add(static_box_2, Wx::SizerFlags.new.border(Wx::ALL))

    bSizer1.add(box_sizer, Wx::SizerFlags.new.expand.border(Wx::ALL))

    if Wx::PLATFORM != 'WXMAC'
      @stdBtn_line = Wx::StaticLine.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
                                      Wx::Size.new(20, -1))
      bSizer1.add(@stdBtn_line, Wx::SizerFlags.new.expand.border(Wx::ALL))
    end
    @stdBtn = Wx::StdDialogButtonSizer.new
    @stdBtn_ok = Wx::Button.new(self, Wx::ID_OK)
    @stdBtn.add_button(@stdBtn_ok)
    @stdBtn_ok.set_default
    @stdBtn_close = Wx::Button.new(self, Wx::ID_CLOSE)
    @stdBtn.add_button(@stdBtn_close)
    @stdBtn.add_button(Wx::ContextHelpButton.new(self, Wx::ID_CONTEXT_HELP))
    @stdBtn.realize
    bSizer1.add(@stdBtn, Wx::SizerFlags.new.expand.border(Wx::ALL))

    if pos != Wx::DEFAULT_POSITION
      set_position(from_dip(pos))
    end
    if size == Wx::DEFAULT_SIZE
      set_sizer_and_fit(bSizer1)
    else
      set_sizer(bSizer1)
      if size.x == Wx::DEFAULT_COORD || size.y == Wx::DEFAULT_COORD
        fit
      end
      set_size(from_dip(size))
      layout
    end
    centre(Wx::BOTH)

    # Event handlers
    evt_update_ui(@stdBtn_close.get_id, :on_update_close)
    evt_button(@stdBtn_close.get_id, :on_close)
    evt_checkbox(@checkPlayAnimation.get_id, :OnEvent)
    evt_init_dialog(:OnInit)
    evt_togglebutton(@toggleBtn.get_id, :OnEvent)
  end

  # Loads image from a string and returns a Wx::Animation object.
  def get_animation(image_name)
    animation = Wx::Animation.new
    animation.load(StringIO.new(image_name))
    return animation
  end
end

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

def OnEvent(event)
  event.skip
end

def OnInit(event)
  event.skip
end

def on_close(event)
  end_modal(Wx::ID_CLOSE)
end

def on_update_close(event)
  @stdBtn_close.set_label('Close Me!')
end
