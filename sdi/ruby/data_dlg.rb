###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'
require 'wx/grid'
require 'wx/pg'

class DataDlg < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title = 'Data testing',
                 pos = Wx::DEFAULT_POSITION, size = Wx::DEFAULT_SIZE,
                 style = Wx::DEFAULT_DIALOG_STYLE|Wx::RESIZE_BORDER)

    super(parent, id, title, pos, size, style)

    dlg_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    @notebook = Wx::Notebook.new(self, Wx::ID_ANY)
    dlg_sizer.add(@notebook, Wx::SizerFlags.new.border(Wx::ALL))

    grid_tab = Wx::Panel.new(@notebook, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TAB_TRAVERSAL)
    @notebook.add_page(grid_tab, 'Grid')

    page_sizer_2 = Wx::BoxSizer.new(Wx::VERTICAL)

    @kicadGrid = Wx::GRID::Grid.new(grid_tab, Wx::ID_ANY)
    @kicadGrid.create_grid(2, 11)
    @kicadGrid.enable_drag_grid_size(false)
    @kicadGrid.set_margins(0, 0)
    font_info = Wx::FontInfo.new(Wx::SystemSettings.get_font(
      Wx::SYS_DEFAULT_GUI_FONT).get_point_size())
    @kicadGrid.set_label_font(Wx::Font.new(font_info))
    @kicadGrid.set_default_cell_alignment(Wx::ALIGN_LEFT, Wx::ALIGN_TOP)
    @kicadGrid.set_col_label_alignment(Wx::ALIGN_CENTER, Wx::ALIGN_CENTER)
    @kicadGrid.set_col_label_size(24)
    @kicadGrid.set_col_size(0, 124)
    @kicadGrid.set_col_size(1, 60)
    @kicadGrid.set_col_size(2, 110)
    @kicadGrid.set_col_size(3, 110)
    @kicadGrid.set_col_size(4, 110)
    @kicadGrid.set_col_size(5, 60)
    @kicadGrid.set_col_size(6, 110)
    @kicadGrid.set_col_size(7, 110)
    @kicadGrid.set_col_size(8, 110)
    @kicadGrid.set_col_size(9, 110)
    @kicadGrid.set_col_size(10, 110)
    @kicadGrid.set_col_label_value(0, 'Text Items')
    @kicadGrid.set_col_label_value(1, 'Show')
    @kicadGrid.set_col_label_value(2, 'Width')
    @kicadGrid.set_col_label_value(3, 'Height')
    @kicadGrid.set_col_label_value(4, 'Thickness')
    @kicadGrid.set_col_label_value(5, 'Italic')
    @kicadGrid.set_col_label_value(6, 'Layer')
    @kicadGrid.set_col_label_value(7, 'Orientation')
    @kicadGrid.set_col_label_value(8, 'Unconstrained')
    @kicadGrid.set_col_label_value(9, 'X Offset')
    @kicadGrid.set_col_label_value(10, 'Y Offset')

    @kicadGrid.enable_drag_row_size(false)
    @kicadGrid.set_row_label_alignment(Wx::ALIGN_LEFT, Wx::ALIGN_CENTER)
    @kicadGrid.set_row_label_size(160)
    @kicadGrid.set_row_label_value(0, 'Reference designator')
    @kicadGrid.set_row_label_value(1, 'Value')
    @kicadGrid.set_min_size(from_dip(Wx::Size.new(800, 140)))
    page_sizer_2.add(@kicadGrid,
      Wx::SizerFlags.new(1).expand.border(Wx::LEFT|Wx::RIGHT|Wx::BOTTOM, Wx::SizerFlags.get_default_border))
    grid_tab.set_sizer_and_fit(page_sizer_2)

    prop_grid_tab = Wx::Panel.new(@notebook, Wx::ID_ANY,
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::TAB_TRAVERSAL)
    @notebook.add_page(prop_grid_tab, 'PropertyGrid')

    page_sizer_4 = Wx::BoxSizer.new(Wx::VERTICAL)

    @propertyGrid = Wx::PropertyGrid.new(prop_grid_tab, Wx::ID_ANY)
    page_sizer_4.add(@propertyGrid, Wx::SizerFlags.new.expand.border(Wx::ALL))

    @propertyGridICategory = @propertyGrid.append(Wx::PG::PropertyCategory.new(
    'CategoryName', 'CategoryName'))

    @pgi_string = @propertyGrid.append(Wx::PG::StringProperty.new('String', ''))

    @pgi_integer = @propertyGrid.append(Wx::PG::IntProperty.new('Integer', ''))
    prop_grid_tab.set_sizer_and_fit(page_sizer_4)

    tree_tab = Wx::Panel.new(@notebook, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TAB_TRAVERSAL)
    @notebook.add_page(tree_tab, 'Trees')

    page_sizer_3 = Wx::BoxSizer.new(Wx::VERTICAL)

    flex_grid_sizer = Wx::FlexGridSizer.new(2, 0, 0)
    flex_grid_sizer.add_growable_col(0)
    flex_grid_sizer.add_growable_col(1)

    @static_text = Wx::StaticText.new(tree_tab, Wx::ID_ANY, 'wxTreeCtrl')
    flex_grid_sizer.add(@static_text,
      Wx::SizerFlags.new(1).expand.border(Wx::ALL))

    @static_text2 = Wx::StaticText.new(tree_tab, Wx::ID_ANY, 'wxTreeListCtrl')
    flex_grid_sizer.add(@static_text2,
      Wx::SizerFlags.new(1).expand.border(Wx::ALL))

    @tree_ctrl = Wx::TreeCtrl.new(tree_tab, Wx::ID_ANY)
    flex_grid_sizer.add(@tree_ctrl, Wx::SizerFlags.new(1).expand.border(Wx::ALL))
    # wxTreeListCtrl is not supported by Ruby

    page_sizer_3.add(flex_grid_sizer,
    Wx::SizerFlags.new(1).expand.border(Wx::ALL))
    tree_tab.set_sizer_and_fit(page_sizer_3)

    dataview_tab = Wx::Panel.new(@notebook, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TAB_TRAVERSAL)
    @notebook.add_page(dataview_tab, 'DataView')
    dataview_tab.set_background_colour(Wx::SystemSettings.get_colour(
      Wx::SYS_COLOUR_BTNFACE))

    page_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    flex_grid_sizer2 = Wx::FlexGridSizer.new(3, 0, 0)
    flex_grid_sizer2.add_growable_col(0)
    flex_grid_sizer2.add_growable_col(1)
    flex_grid_sizer2.add_growable_col(2)

    static_text3 = Wx::StaticText.new(dataview_tab, Wx::ID_ANY, 'wxDataView')
    flex_grid_sizer2.add(static_text3, Wx::SizerFlags.new.expand.border(Wx::ALL))

    @static_text5 = Wx::StaticText.new(dataview_tab, Wx::ID_ANY,
      'wxDataViewList')
    flex_grid_sizer2.add(@static_text5,
      Wx::SizerFlags.new.expand.border(Wx::ALL))

    @static_text4 = Wx::StaticText.new(dataview_tab, Wx::ID_ANY,
      'wxDataViewtree')
    flex_grid_sizer2.add(@static_text4,
      Wx::SizerFlags.new.expand.border(Wx::ALL))
    # wxDataViewCtrl is not supported by Ruby
    # wxDataViewListCtrl is not supported by Ruby
    # wxDataViewTreeCtrl is not supported by Ruby

    page_sizer.add(flex_grid_sizer2,
    Wx::SizerFlags.new(1).expand.border(Wx::ALL))
    dataview_tab.set_sizer_and_fit(page_sizer)

    box_sizer_14 = Wx::BoxSizer.new(Wx::HORIZONTAL)

    staticText_4 = Wx::StaticText.new(self, Wx::ID_ANY, 'Events:')
    box_sizer_14.add(staticText_4, Wx::SizerFlags.new.center.border(Wx::ALL))

    btn = Wx::Button.new(self, Wx::ID_ANY, 'Clear Events')
    box_sizer_14.add(btn, Wx::SizerFlags.new.border(Wx::ALL))

    dlg_sizer.add(box_sizer_14, Wx::SizerFlags.new.border(Wx::ALL))

    @events_list = Wx::ListBox.new(self, Wx::ID_ANY)
    @events_list.set_min_size(from_dip(Wx::Size.new(-1, 150)))
    dlg_sizer.add(@events_list, Wx::SizerFlags.new(1).expand.border(Wx::ALL))

    if Wx::PLATFORM != 'WXMAC'
      stdBtn_line = Wx::StaticLine.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
                                  Wx::Size.new(20, -1))
      dlg_sizer.add(stdBtn_line, Wx::SizerFlags.new.expand.border(Wx::ALL))
    end
    stdBtn = Wx::StdDialogButtonSizer.new
    stdBtn_ok = Wx::Button.new(self, Wx::ID_OK)
    stdBtn.add_button(stdBtn_ok)
    stdBtn_ok.set_default
    stdBtn_cancel = Wx::Button.new(self, Wx::ID_CANCEL)
    stdBtn.add_button(stdBtn_cancel)
    stdBtn.realize
    dlg_sizer.add(stdBtn, Wx::SizerFlags.new.expand.border(Wx::ALL))

    if pos != Wx::DEFAULT_POSITION
      set_position(from_dip(pos))
    end
    if size == Wx::DEFAULT_SIZE
      set_sizer_and_fit(dlg_sizer)
    else
      set_sizer(dlg_sizer)
      if size.x == Wx::DEFAULT_COORD || size.y == Wx::DEFAULT_COORD
        fit
      end
      set_size(from_dip(size))
      layout
    end
    centre(Wx::BOTH)

    # Event handlers
    evt_button(btn.get_id, :OnClearList)
    # evt_grid_col_size(@kicadGrid.get_id, :OnColumnResize)
    evt_init_dialog(:on_init)
    evt_pg_changed(@propertyGrid.get_id, :on_changed)
    evt_size(:OnGridSize)
    evt_tree_item_expanded(@tree_ctrl.get_id, :on_tree_item_expanded)
  end
end
# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

def OnEventName(event_name)
  pos = @events_list.Append(event_name)
  @events_list.Select(pos)
end

def on_init(event)
  @kicadGrid.SetCellValue(0, 0, "cat")
  @kicadGrid.SetCellValue(0, 1, "dog")

  @propertyGrid.set_property_value(@pgi_string, "cat")
  @propertyGrid.SetPropertyValue(@pgi_integer, 3)

  root = @tree_ctrl.AddRoot("Root")
  child = @tree_ctrl.AppendItem(root, "Child # 1")
  @tree_ctrl.AppendItem(child, "Grandchild")
  @tree_ctrl.AppendItem(root, "Child # 2")

end

def OnClearList(event)
  @events_list.clear()
end

def OnColumnResize(event)
  OnEventName("wxEVT_SIZE")
end

def OnGridSize(event)
  OnEventName("wxEVT_SIZE")
end

def on_changed(event)
  OnEventName("wxEVT_PG_CHANGED")
end

def on_data_view_ctrl_selection_changed(event)
  OnEventName("wxEVT_DATAVIEW_SELECTION_CHANGED")
end

def on_tree_item_expanded(event)
  OnEventName("wxEVT_TREE_ITEM_EXPANDED")
end

def on_tree_list_sel_changed(event)
  OnEventName("wxEVT_TREELIST_SELECTION_CHANGED")
end
