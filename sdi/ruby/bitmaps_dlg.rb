###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'

require_relative 'images'
require 'zlib'
require 'base64'
require 'stringio'

class BitmapsDlg < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title = 'Bitmaps Testing',
                 pos = Wx::DEFAULT_POSITION, size = Wx::DEFAULT_SIZE,
                 style = Wx::DEFAULT_DIALOG_STYLE)

    super(parent, id, title, pos, size, style)

    dlg_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    @tool_bar = Wx::ToolBar.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TB_HORIZONTAL)
    @tool_bar.add_tool(Wx::ID_ANY, 'one', wxue_get_bundle($wxPython_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, 'two', wxue_get_bundle($wxPython_1_5x_png, $wxPython_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, 'three', wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, 'xpm', Wx::Bitmap.new('../../art/english.xpm',
      Wx::BITMAP_TYPE_XPM))

    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($wxPython_svg))
    @tool_bar.add_tool(Wx::ID_ANY, 'svg', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(16, 16)))

    @tool_bar.add_tool(Wx::ID_ANY, 'art', Wx::ArtProvider.get_bitmap_bundle(
      Wx::ART_TIP, Wx::ART_TOOLBAR))

    @tool_bar.realize
    dlg_sizer.add(@tool_bar, Wx::SizerFlags.new.border(Wx::ALL))

    grid_sizer = Wx::GridSizer.new(6, 0, 0)

    static_text = Wx::StaticText.new(self, Wx::ID_ANY, 'one')
    grid_sizer.add(static_text, Wx::SizerFlags.new.border(Wx::ALL))

    static_text2 = Wx::StaticText.new(self, Wx::ID_ANY, 'two')
    grid_sizer.add(static_text2, Wx::SizerFlags.new.border(Wx::ALL))

    static_text3 = Wx::StaticText.new(self, Wx::ID_ANY, 'three')
    grid_sizer.add(static_text3, Wx::SizerFlags.new.border(Wx::ALL))

    static_text4 = Wx::StaticText.new(self, Wx::ID_ANY, 'xpm')
    grid_sizer.add(static_text4, Wx::SizerFlags.new.border(Wx::ALL))

    static_text5 = Wx::StaticText.new(self, Wx::ID_ANY, 'SVG')
    grid_sizer.add(static_text5, Wx::SizerFlags.new.border(Wx::ALL))

    static_text6 = Wx::StaticText.new(self, Wx::ID_ANY, 'art')
    grid_sizer.add(static_text6, Wx::SizerFlags.new.border(Wx::ALL))

    bmp = Wx::StaticBitmap.new(self, Wx::ID_ANY, wxue_get_bundle($wxPython_2x_png))
    grid_sizer.add(bmp, Wx::SizerFlags.new.border(Wx::ALL))

    bmp2 = Wx::StaticBitmap.new(self, Wx::ID_ANY, wxue_get_bundle($wxPython_1_5x_png,
      $wxPython_2x_png))
    grid_sizer.add(bmp2, Wx::SizerFlags.new.border(Wx::ALL))

    bmp3 = Wx::StaticBitmap.new(self, Wx::ID_ANY, wxue_get_bundle($wxPython_png,
      $wxPython_1_5x_png, $wxPython_2x_png))
    grid_sizer.add(bmp3, Wx::SizerFlags.new.border(Wx::ALL))

    bmp4 = Wx::StaticBitmap.new(self, Wx::ID_ANY,
      Wx::Bitmap.new('../../art/english.xpm', Wx::BITMAP_TYPE_XPM))
    grid_sizer.add(bmp4, Wx::SizerFlags.new.border(Wx::ALL))

    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($wxPython_svg))
    bmp5 = Wx::StaticBitmap.new(self, Wx::ID_ANY, Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(16, 16)))
    grid_sizer.add(bmp5, Wx::SizerFlags.new.border(Wx::ALL))

    bmp6 = Wx::StaticBitmap.new(self, Wx::ID_ANY,
      Wx::ArtProvider.get_bitmap_bundle(Wx::ART_TIP, Wx::ART_TOOLBAR))
    grid_sizer.add(bmp6, Wx::SizerFlags.new.border(Wx::ALL))

    dlg_sizer.add(grid_sizer, Wx::SizerFlags.new.border(Wx::ALL))

    if Wx::PLATFORM != 'WXMAC'
      stdBtn_line = Wx::StaticLine.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
                                  Wx::Size.new(20, -1))
      dlg_sizer.add(stdBtn_line, Wx::SizerFlags.new.expand.border(Wx::ALL))
    end
    stdBtn = Wx::StdDialogButtonSizer.new
    _ok_btn = Wx::Button.new(self, Wx::ID_OK)
    stdBtn.add_button(_ok_btn)
    _ok_btn.set_default
    stdBtn.add_button(Wx::Button.new(self, Wx::ID_CANCEL))
    stdBtn.realize
    dlg_sizer.add(stdBtn, Wx::SizerFlags.new.expand.border(Wx::ALL))

    set_sizer_and_fit(dlg_sizer)
    centre(Wx::BOTH)
  end
end

$wxPython_svg = (
  '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' +
  'B6TsTU44PzV4C+VGbKC2+wVf/n/ip78B2GH9kg==')

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************
