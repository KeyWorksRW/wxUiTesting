###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

"""PythonDlg class generated by wxUiEditor."""

import wx
import io
import wx.adv
import wx.aui

import images
import zlib
import base64
from wx.lib.embeddedimage import PyEmbeddedImage

class PythonDlg(wx.Dialog):
    def __init__(self, parent, id=wx.ID_ANY, title="Hello Python Dialog!",
                pos=wx.DefaultPosition, size=wx.DefaultSize,
                style=wx.DEFAULT_DIALOG_STYLE, name=wx.DialogNameStr):
        wx.Dialog.__init__(self)

        if not self.Create(parent, id, title, pos, size, style, name):
            return

        bSizer1 = wx.BoxSizer(wx.VERTICAL)

        box_sizer = wx.BoxSizer(wx.VERTICAL)

        self.auiToolBar = wx.aui.AuiToolBar(self, wx.ID_ANY, wx.DefaultPosition,
            wx.DefaultSize, wx.aui.AUI_TB_PLAIN_BACKGROUND|wx.aui.AUI_TB_DEFAULT_STYLE)
        self.auiToolBar.AddLabel(wx.ID_ANY, "Label")
        tool_2 = self.auiToolBar.AddTool(wx.ID_ANY, "Search", wx.BitmapBundle.FromBitmaps([
            images.fontPicker_png.Bitmap,
                    images.fontPicker_1_25x_png.Bitmap,
                    images.fontPicker_1_5x_png.Bitmap,
                    images.fontPicker_1_75x_png.Bitmap,
                    images.fontPicker_2x_png.Bitmap ]), wx.NullBitmap, wx.ITEM_NORMAL,
            "This tool should be initially disabled.",
            "This tool should be initially disabled.", None)
        tool_2.SetState(wx.aui.AUI_BUTTON_STATE_NORMAL|wx.aui.AUI_BUTTON_STATE_DISABLED)
        self.auiToolBar.AddSpacer(self.auiToolBar.FromDIP(10))

        self.spinCtrl = wx.SpinCtrl(self.auiToolBar)
        self.auiToolBar.AddControl(self.spinCtrl)
        self.auiToolBar.Realize()
        box_sizer.Add(self.auiToolBar, wx.SizerFlags().Border(wx.ALL))

        self.staticText = wx.StaticText(self, wx.ID_ANY,
            "wxPython est g√©nial n\'est-ce pas?", self.FromDIP(wx.Point(100, 250)),
            self.FromDIP(wx.Size(300, 80)), wx.ALIGN_CENTER_HORIZONTAL, "my_text")
        self.staticText.SetWindowVariant(wx.WINDOW_VARIANT_LARGE)
        self.staticText.SetForegroundColour(wx.Colour("#008000"))
        box_sizer.Add(self.staticText, wx.SizerFlags().Center().Border(wx.ALL))

        _svg_string_ = zlib.decompress(base64.b64decode(images.face_smile_svg))
        bmp = wx.StaticBitmap(self, wx.ID_ANY,
            wx.BitmapBundle.FromSVG(_svg_string_, wx.Size(32, 32)))
        box_sizer.Add(bmp, wx.SizerFlags().Border(wx.ALL))

        # wxPython currently does not support a checkbox as a static box label
        static_box_2 = wx.StaticBoxSizer(wx.VERTICAL, self, "Play Animation")

        self.toggleBtn = wx.ToggleButton(static_box_2.GetStaticBox(), wx.ID_ANY,
            "Play Animation", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
        static_box_2.Add(self.toggleBtn, wx.SizerFlags().Border(wx.ALL))

        self.animation_ctrl = wx.adv.AnimationCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.adv.NullAnimation, wx.DefaultPosition, wx.DefaultSize, wx.adv.AC_DEFAULT_STYLE)
        self.animation_ctrl.SetInactiveBitmap(wx.BitmapBundle.FromBitmap(
            images.disabled_png.Bitmap))
        animate = self.animation_ctrl.CreateAnimation()
        stream = io.BytesIO(clr_hourglass_gif.GetData())
        animate.Load(stream)
        self.animation_ctrl.SetAnimation(animate)
        static_box_2.Add(self.animation_ctrl, wx.SizerFlags().Border(wx.ALL))

        box_sizer.Add(static_box_2, wx.SizerFlags().Border(wx.ALL))

        bSizer1.Add(box_sizer, wx.SizerFlags().Expand().Border(wx.ALL))

        if "wxMac" not in wx.PlatformInfo:
            stdBtn_line = wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.Size(20, -1))
            bSizer1.Add(stdBtn_line, wx.SizerFlags().Expand().Border(wx.ALL))

        stdBtn = wx.StdDialogButtonSizer()
        stdBtn_OK = wx.Button(self, wx.ID_OK)
        stdBtn.SetAffirmativeButton(stdBtn_OK)
        stdBtn_Cancel = wx.Button(self, wx.ID_CANCEL)
        stdBtn.SetCancelButton(stdBtn_Cancel)
        stdBtn_ContextHelp = wx.ContextHelpButton(self, wx.ID_CONTEXT_HELP)
        stdBtn.AddButton(stdBtn_ContextHelp)
        stdBtn_OK.SetDefault()
        stdBtn.Realize()
        bSizer1.Add(stdBtn, wx.SizerFlags().Expand().Border(wx.ALL))

        if pos != wx.DefaultPosition:
            self.SetPosition(self.FromDIP(pos))
        if size == wx.DefaultSize:
            self.SetSizerAndFit(bSizer1)
        else:
            self.SetSizer(bSizer1)
            if size.x == wx.DefaultCoord or size.y == wx.DefaultCoord:
                self.Fit()
            self.SetSize(self.FromDIP(size))
            self.Layout()
        self.Centre(wx.BOTH)

        # Bind Event handlers
        self.Bind(wx.EVT_INIT_DIALOG, self.OnInit)
        self.toggleBtn.Bind(wx.EVT_TOGGLEBUTTON, lambda event:self.animation_ctrl.Play())

    # Unimplemented Event handler functions
    # Copy any listed and paste them below the comment block, or to your inherited class.
    """
    def (self, event):
        event.Skip()

    """

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

    # Event handler functions
    def OnInit(self, event):
        # self.m_staticText.SetLabel("Hello Python!")
        event.Skip()
