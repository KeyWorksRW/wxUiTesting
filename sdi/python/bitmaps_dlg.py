###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

"""BitmapsDlg class generated by wxUiEditor."""

import wx

import images
import zlib
import base64
from wx.lib.embeddedimage import PyEmbeddedImage

# ../art/wxPython.svg
wxPython_svg = (
    b"eNrlWU1z20YS3Z8yBV+cKmA43x+U6UsOe0rtYTc55AaToIgyCLAAWBL96/MaIClCJhVFtlJbu0a5DPbM"
    b"9PTrfm8+4A/d3S27K9qubOpFIrlIWLlaJLCqhHXNqtzh7/zUQXAN+3256jeLJGiuvRTS7/qEbYrydtPD"
    b"hYATIUUgY1l/7pb5rpgXD7um7bN1WRV1vi0WyW7fb5o6q5rbJmvqas939e23/R9Wu3KRKK24Md+27iet"
    b"D9uq7ubtar1INn2/m89m9/f3/F7zpr2dyRjjTKiZUhl6ZN2+7vOHrO7eHcctl6dhy7bI+/KuWDbbbVN3"
    b"w/iznqvHnrsvbTU0r5azoiq2Rd13M8nlLPn4YVWsuyGV9GJgqMq6yNt/tvmqRL+haWpSPlr06/pmx7p+"
    b"XyFL9J4tm6pp5+8+BXpuBlOzy5dlv58LbmIQOip1k7Bmve4KVOBYQnSES5/Mrvv0a3qe+DxzJSeuIrma"
    b"TYN+Ea7gk78YA7fXAIX44wDJ1wHSzrvnCqXoeSEg+ArPAfqk6XkRIO2CeCUgpZ8DtDb0TGOQl9EoKPE6"
    b"mvtN2RdX/ciJn1dCMc7L56CsV0Z/ehLC5crAk36uMut1Ebx+CRp4sq9FA7pfD8HmEXheiGZk+zVXWrgY"
    b"w3VXEzhRvwTOg8TirAxXOkaXsD1+SmO4t156LKZqkWTOci2CFdhT9mrSfGEZiYGGwfh5vmkLLPPvLpSe"
    b"3R5+/VqXfbdIvnRF+2/gKf5V/9oVj83/afO6WzftdpH09FrlffFeCsGVFyqNkTsppfuJcF6AJb3i0SgR"
    b"Rljec+NtDHqEpRx38BLDiMo7riUefRlVFH+CChR4e1SnvRV8qIolKp5X9/m+e0FsF0BZKtUPjvl7Ev/D"
    b"8Hp5BW98G7yv1c9bF1iZ8H9VYGXF/2iBrwK2rwG8zfu2fHiP445T1shU0IMfOIeqNJOS2+hNmnnuRLTm"
    b"v53kNvxtOXjKe8eld0jMn/OeAsir70vBcPUYUjD1poIAPZYPi8QhbBkCCXG5R7i4dKlgca5h62nretra"
    b"IvjIhcbxQz+XrWOapPfRObziBsm90ZSf50vwxkqQxr+FEgyPUcqRD6gs7tFHIljBI60QBzFExbUFF0Yi"
    b"YAiSKem+O2hBe6wqaryZvaUWkIXwd2aBCG9C1H7MghIQi/ZBHrKgLXfOKnvIAvzo6J1/azlIE8R3ZAEY"
    b"TRTW2SILaSaGNQ+HaZdKLqxxLqSa41JqjfVF5tMs4KcQIZVGceOUoOT8MC3SAZ4+TXz8sMv7zfFKsC6r"
    b"av6lrd6/+7b+P91Q6/ldBwn6hVkUUQYfbBo52OqNkkVm2M8MRNagrlaouFBKYYnzzFgerQ8GEueG1jAX"
    b"YVRcCocoKRNICS4YTAvuncCtBEkRYInXkqlACQGAFLSPxntpTjaMtcCmpIvsjklkF0FZtmGgUpDKwqi5"
    b"wSxky47GDB0H25JhQfZRGRtTwYiZTiJpIaR4CyCmh9FRAfEHJdFYxTX8Z1QaGeRgpEkVli+yWvoyZql6"
    b"jtvgQG4mUoW4LZMcLIgqaMCAk2AVcxxFtwa5Ong2gSEG9XS6DYsHYHeIR/EhcgGq8ICuQjHsKpjZYH/B"
    b"vA6qI0eI254Mh5z4Af8SA4w10UKaTB4SpNMM248O0pmTDcM1d0MaM2W51fI4NSA5p3UAaoxSFC5F5hXq"
    b"4yXLJh4IWUTFf2YO6AK4HlL6puijgYKZjRz7vNGDPISC5KPQ1xj2O9sOhbJpGHMiEJOPiAqzO2ytHpiI"
    b"EzCnSFUMzlh3slgES+mlahWZQw8A1noonnLSC40uYizy4xhxrDr2KeMdQGHsYwca672RZ2Oy0yApBllj"
    b"IuW01YzKh/3OUJdjLGejjqav41JEMpXRDF+LXihZe1GyWxawfCIiaAbqIb6MmiFeukNZQTMtvLUki0D3"
    b"G0tEjsOfUQkw+IOUjlxCXyg+aD1IaKy7ialDToIJ+owLJzIduGT8MOvIJWMYHXACqY+OSwayPmPiOFYI"
    b"wwI3wWstUTtQ2EliulMO+0hKpym4OjEdEVHMkCQREWsQ+HZOeMtD8OThCd9pmt9YgIaFiDJOAEMKj0vK"
    b"yXr0YAZx0ZLiBnFhC4swS5rLaIAKx67YF7OTwsGsGJFBSFpHLOMOFhewfg4CRk29dyS7cSkhKCB9IBmi"
    b"yRhJxMNeGfyZz+zSRF8H+dhh+UuhxnFtGMRD1MZmRMw+0w/x2rOpFFC3k3qI1GZQD7F6FNiQv+xccqNl"
    b"VChVZSIdSHSqnEP/YYrsoFA26BP7xlFaxrMnYoNloho7fE0sqqrcdcVROGcf0bHiqJtHIX276z8V0viz"
    b"/VIV87qpvxZtc9P1bfN5+Fkc3rPh/0nmyDESZ47GbdkXbVXin/nJtsq7Td62+X4y/Ey2JyghmvEQYC1l"
    b"A5Q9HALAB+yDHqe3Fq04IEUtosf5qUUrlOuwgcrxC353d/vxH38ASrdtpw==")

class BitmapsDlg(wx.Dialog):
    def __init__(self, parent, id=wx.ID_ANY, title="Bitmaps Testing",
                pos=wx.DefaultPosition, size=wx.DefaultSize,
                style=wx.DEFAULT_DIALOG_STYLE, name=wx.DialogNameStr):
        wx.Dialog.__init__(self)

        if not self.Create(parent, id, title, pos, size, style, name):
            return

        dlg_sizer = wx.BoxSizer(wx.VERTICAL)

        self.tool_bar = wx.ToolBar(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TB_HORIZONTAL)
        self.tool_bar.AddTool(wx.ID_ANY, "one", images.wxPython_2x_png.Bitmap)

        self.tool_bar.AddTool(wx.ID_ANY, "two", wx.BitmapBundle.FromBitmaps(
            images.wxPython_1_5x_png.Bitmap, images.wxPython_2x_png.Bitmap))

        self.tool_bar.AddTool(wx.ID_ANY, "three", wx.BitmapBundle.FromBitmaps([ images.
            wxPython_png.Bitmap,
                    images.wxPython_1_5x_png.Bitmap,
                    images.wxPython_2x_png.Bitmap ]))

        self.tool_bar.AddTool(wx.ID_ANY, "xpm", wx.Bitmap("../../art/english.xpm",
            wx.BITMAP_TYPE_XPM))

        _svg_string_ = zlib.decompress(base64.b64decode(wxPython_svg))
        self.tool_bar.AddTool(wx.ID_ANY, "svg",
            wx.BitmapBundle.FromSVG(_svg_string_, wx.Size(16, 16)))

        self.tool_bar.AddTool(wx.ID_ANY, "art", wx.ArtProvider.GetBitmapBundle(wx.ART_TIP,
            wx.ART_TOOLBAR))

        self.tool_bar.Realize()
        dlg_sizer.Add(self.tool_bar, wx.SizerFlags().Border(wx.ALL))

        grid_sizer = wx.GridSizer(6, 0, 0)

        static_text = wx.StaticText(self, wx.ID_ANY, "one")
        grid_sizer.Add(static_text, wx.SizerFlags().Border(wx.ALL))

        static_text2 = wx.StaticText(self, wx.ID_ANY, "two")
        grid_sizer.Add(static_text2, wx.SizerFlags().Border(wx.ALL))

        static_text3 = wx.StaticText(self, wx.ID_ANY, "three")
        grid_sizer.Add(static_text3, wx.SizerFlags().Border(wx.ALL))

        static_text4 = wx.StaticText(self, wx.ID_ANY, "xpm")
        grid_sizer.Add(static_text4, wx.SizerFlags().Border(wx.ALL))

        static_text5 = wx.StaticText(self, wx.ID_ANY, "SVG")
        grid_sizer.Add(static_text5, wx.SizerFlags().Border(wx.ALL))

        static_text6 = wx.StaticText(self, wx.ID_ANY, "art")
        grid_sizer.Add(static_text6, wx.SizerFlags().Border(wx.ALL))

        bmp = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapBundle.FromBitmap(
            images.wxPython_2x_png.Bitmap))
        grid_sizer.Add(bmp, wx.SizerFlags().Border(wx.ALL))

        bmp2 = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapBundle.FromBitmaps(
            images.wxPython_1_5x_png.Bitmap, images.wxPython_2x_png.Bitmap))
        grid_sizer.Add(bmp2, wx.SizerFlags().Border(wx.ALL))

        bitmaps = [ images.wxPython_png.Bitmap,
                    images.wxPython_1_5x_png.Bitmap,
                    images.wxPython_2x_png.Bitmap ]
        bmp3 = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapBundle.FromBitmaps(bitmaps))
        grid_sizer.Add(bmp3, wx.SizerFlags().Border(wx.ALL))

        bmp4 = wx.StaticBitmap(self, wx.ID_ANY,
            wx.Bitmap("../../art/english.xpm", wx.BITMAP_TYPE_XPM))
        grid_sizer.Add(bmp4, wx.SizerFlags().Border(wx.ALL))

        _svg_string_ = zlib.decompress(base64.b64decode(wxPython_svg))
        bmp5 = wx.StaticBitmap(self, wx.ID_ANY,
            wx.BitmapBundle.FromSVG(_svg_string_, wx.Size(16, 16)))
        grid_sizer.Add(bmp5, wx.SizerFlags().Border(wx.ALL))

        bmp6 = wx.StaticBitmap(self, wx.ID_ANY, wx.ArtProvider.GetBitmapBundle(wx.ART_TIP,
            wx.ART_TOOLBAR))
        grid_sizer.Add(bmp6, wx.SizerFlags().Border(wx.ALL))

        dlg_sizer.Add(grid_sizer, wx.SizerFlags().Border(wx.ALL))

        if "wxMac" not in wx.PlatformInfo:
            stdBtn_line = \
                wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.Size(20, -1))
            dlg_sizer.Add(stdBtn_line, wx.SizerFlags().Expand().Border(wx.ALL))

        stdBtn = wx.StdDialogButtonSizer()
        stdBtn_OK = wx.Button(self, wx.ID_OK)
        stdBtn.SetAffirmativeButton(stdBtn_OK)
        stdBtn_Cancel = wx.Button(self, wx.ID_CANCEL)
        stdBtn.SetCancelButton(stdBtn_Cancel)
        stdBtn_OK.SetDefault()
        stdBtn.Realize()
        dlg_sizer.Add(stdBtn, wx.SizerFlags().Expand().Border(wx.ALL))

        if pos != wx.DefaultPosition:
            self.SetPosition(self.FromDIP(pos))
        if size == wx.DefaultSize:
            self.SetSizerAndFit(dlg_sizer)
        else:
            self.SetSizer(dlg_sizer)
            if size.x == wx.DefaultCoord or size.y == wx.DefaultCoord:
                self.Fit()
            self.SetSize(self.FromDIP(size))
            self.Layout()
        self.Centre(wx.BOTH)
# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************
