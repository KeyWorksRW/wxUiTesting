cmake_minimum_required(VERSION 3.20)

project(quick_test LANGUAGES CXX)
project(quick_test
    LANGUAGES CXX
    VERSION 1.0.0
    DESCRIPTION "SDI Test"
    HOMEPAGE_URL "https://github.com/KeyWorksRW/wxUiEditor")

####################### Options #######################

option(BUILD_SHARED_LIBS "Build with wxWidgets shared libraries" ON)

if (BUILD_SHARED_LIBS)
    message(NOTICE "Building with wxWidgets shared libraries")
else()
    message(NOTICE "Building with wxWidgets static libraries")
endif()

# This option is designed to make it possible to check changes to a wxWidgets fork, and/or to
# build with the current wxWidgets sources (assuming the wxWidgets fork is in sync).
# Realistically, this is only going to be usable by the maintainers of this project.

option(BUILD_31 "Builds wxWidgets using wxWidgets31")
option(BUILD_33 "Builds wxWidgets using wxWidgets33")

if (BUILD_31 AND BUILD_33)
    message(FATAL_ERROR "BUILD_33 and BUILD_31 cannot be combined")
endif()

if (BUILD_31)
    set(BUILD_ROOT ${BUILD_31_DIR} CACHE PATH "${CMAKE_CURRENT_LIST_DIR}/../wxWidgets31" FORCE)
    set(WIDGETS_LIB wxWidgets31)
elseif (BUILD_33)
    set(BUILD_ROOT ${BUILD_33_DIR} CACHE PATH "${CMAKE_CURRENT_LIST_DIR}/../wxWidgets33" FORCE)
    set(WIDGETS_LIB wxWidgets33)
else()
    set(BUILD_ROOT ${CMAKE_CURRENT_LIST_DIR}/../wxWidgets32 CACHE PATH "${CMAKE_CURRENT_LIST_DIR}/../wxWidgets32" FORCE)
    set(WIDGETS_LIB wxWidgets32)
endif()

if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BUILD_ROOT}/build)
endif()

message(NOTICE "Building into ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} using ${WIDGETS_LIB}")

option(INTERNAL_DARK_MODE "Enable dark mode (used with wxWidgets 3.3 in _WIN32 builds)" OFF)
option(INTERNAL_DARK_HIGH_CONTRAST "Enable dark mode high contrast (used with wxWidgets 3.3 in _WIN32 builds)" OFF)

####################### Check for Multi-Config Generator #######################

get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if (NOT isMultiConfig)
    message("\nBecause you are using a single target generator, you MUST specify")
    message("    a \"--config [Debug|Release]\" option with the cmake --build command\n")

    set(allowedBuildTypes Debug Release)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "${allowedBuildTypes}")

    if (NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)
    elseif (NOT CMAKE_BUILD_TYPE IN_LIST allowedBuildTypes)
        message(FATAL_ERROR "Unknown build type: ${CMAKE_BUILD_TYPE}")
    endif()
endif()

####################### General Settings #######################

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)

if (MSVC)
    # /O1 often results in faster code than /O2 due to CPU caching
    string(REPLACE "/O2" "/O1" cl_optimize ${CMAKE_CXX_FLAGS_RELEASE})
    set(CMAKE_CXX_FLAGS_RELEASE ${cl_optimize} CACHE STRING "C++ Release flags" FORCE)

    # Using /Z7 instead of /Zi to avoid blocking while parallel compilers write to the pdb file.
    # This can considerably speed up build times at the cost of larger object files.
    string(REPLACE "/Zi" "/Z7" z_seven ${CMAKE_CXX_FLAGS_DEBUG})
    set(CMAKE_CXX_FLAGS_DEBUG ${z_seven} CACHE STRING "C++ Debug flags" FORCE)

    # Use static runtime for Release builds to run with Wine without needing to install the dlls
    if (NOT BUILD_SHARED_LIBS)
        set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    endif()
endif()

add_compile_definitions($<$<CONFIG:Release>:NDEBUG>)

####################### Set wxWidgets location macros #######################

if (WIN32)
    set(setup_dir ${BUILD_ROOT}/win)
else()
    set(setup_dir ${BUILD_ROOT}/unix)
endif()

####################### Libraries and Executables #######################

# Setting CMAKE_MODULE_PATH causes ninja to fail rebuilding until CMake re-generates. Specifying the full path and extension
# means ninja sees this as a normal dependency that didn't change any time one of the files it specifies changes.

include( quick_code.cmake )      # Generated by wxUiEditor
include( file_list.cmake )  # This will set ${file_list} with a list of files

add_executable(quick_test WIN32
    ${file_list}
    ${wxue_generated_code}
)

# This is just used by a github action to confirm that all the source code can be compiled
add_library(check_build STATIC EXCLUDE_FROM_ALL
    ${file_list}
    ${wxue_generated_code}
)

if (BUILD_SHARED_LIBS)
    target_compile_definitions(quick_test PRIVATE WXUSINGDLL)
    target_compile_definitions(check_build PRIVATE WXUSINGDLL)
else()
    # This is built into wxWidgets if a shared library is created
    set(CLib wxCLib)
endif()

if (WIN32)
    target_link_libraries(quick_test PRIVATE ${WIDGETS_LIB} ${CLib} comctl32 Imm32 Shlwapi Version UxTheme)
else()
    target_link_libraries(quick_test PRIVATE ${WIDGETS_LIB} ${CLib})
endif()

if (MSVC)
    # /GL -- combined with the Linker flag /LTCG to perform whole program optimization in Release build
    # /FC -- Full path to source code file in diagnostics
    target_compile_options(quick_test PRIVATE "$<$<CONFIG:Release>:/GL>" "/FC" "/W4" "/Zc:__cplusplus" "/utf-8")
    target_link_options(quick_test PRIVATE "$<$<CONFIG:Release>:/LTCG>")

    # Assume the manifest is in the resource file
    target_link_options(quick_test PRIVATE "/manifest:no")
endif()

target_precompile_headers(quick_test PRIVATE "cpp/pch.h")
target_precompile_headers(check_build PRIVATE "cpp/pch.h")

target_include_directories(quick_test PRIVATE
    ${BUILD_ROOT}/include
    ${setup_dir}
    ${CMAKE_CURRENT_LIST_DIR}/cpp/
)

target_include_directories(check_build PRIVATE
    ${BUILD_ROOT}/include
    ${setup_dir}
    ${CMAKE_CURRENT_LIST_DIR}/cpp/
)

target_link_directories(quick_test PRIVATE
    $<$<CONFIG:Debug>:${BUILD_ROOT}//build/Debug>
    $<$<CONFIG:Release>:${BUILD_ROOT}//build/Release>
)
