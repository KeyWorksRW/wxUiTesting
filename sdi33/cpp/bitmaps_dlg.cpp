///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/bitmap.h>
#include <wx/bmpbndl.h>
#include <wx/button.h>
#include <wx/icon.h>
#include <wx/image.h>
#include <wx/sizer.h>
#include <wx/statbmp.h>
#include <wx/stattext.h>

#include "images.h"

#include "bitmaps_dlg.h"

#include "../../art/english.xpm"

#include <wx/bmpbndl.h>  // wxBitmapBundle class
#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert compressed SVG string into a wxBitmapBundle
#ifdef __cpp_inline_variables
inline wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#else
static wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#endif
{
    auto str = std::make_unique<char[]>(size_svg);
    wxMemoryInputStream stream_in(data, size_data);
    wxZlibInputStream zlib_strm(stream_in);
    zlib_strm.Read(str.get(), size_svg);
    return wxBitmapBundle::FromSVG(str.get(), def_size);
};

namespace wxue_img
{
    extern const unsigned char wxPython_svg[1843];  // ../art/wxPython.svg
}

bool BitmapsDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
    {
        return false;
    }
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_tool_bar = new wxToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL);
    m_tool_bar->AddTool(wxID_ANY, "one", wxue_img::bundle_wxPython_2x_png());

    m_tool_bar->AddTool(wxID_ANY, "two", wxue_img::bundle_wxPython_1_5x_png());

    m_tool_bar->AddTool(wxID_ANY, "three", wxue_img::bundle_wxPython_png());

    m_tool_bar->AddTool(wxID_ANY, "xpm", wxBitmap(english_xpm));

    m_tool_bar->AddTool(wxID_ANY, "svg",
        wxueBundleSVG(wxue_img::wxPython_svg, 1843, 6649, wxSize(16, 16)));

    m_tool_bar->AddTool(wxID_ANY, "art", wxArtProvider::GetBitmapBundle(wxART_TIP, wxART_TOOLBAR));

    m_tool_bar->Realize();
    dlg_sizer->Add(m_tool_bar, wxSizerFlags().Border(wxALL));

    auto* grid_sizer = new wxGridSizer(6, 0, 0);

    auto* static_text = new wxStaticText(this, wxID_ANY, "one");
    grid_sizer->Add(static_text, wxSizerFlags().Border(wxALL));

    auto* static_text2 = new wxStaticText(this, wxID_ANY, "two");
    grid_sizer->Add(static_text2, wxSizerFlags().Border(wxALL));

    auto* static_text3 = new wxStaticText(this, wxID_ANY, "three");
    grid_sizer->Add(static_text3, wxSizerFlags().Border(wxALL));

    auto* static_text4 = new wxStaticText(this, wxID_ANY, "xpm");
    grid_sizer->Add(static_text4, wxSizerFlags().Border(wxALL));

    auto* static_text5 = new wxStaticText(this, wxID_ANY, "SVG");
    grid_sizer->Add(static_text5, wxSizerFlags().Border(wxALL));

    auto* static_text6 = new wxStaticText(this, wxID_ANY, "art");
    grid_sizer->Add(static_text6, wxSizerFlags().Border(wxALL));

    auto* bmp = new wxStaticBitmap(this, wxID_ANY, wxue_img::bundle_wxPython_2x_png());
    grid_sizer->Add(bmp, wxSizerFlags().Border(wxALL));

    auto* bmp2 = new wxStaticBitmap(this, wxID_ANY, wxue_img::bundle_wxPython_1_5x_png());
    grid_sizer->Add(bmp2, wxSizerFlags().Border(wxALL));

    auto* bmp3 = new wxStaticBitmap(this, wxID_ANY, wxue_img::bundle_wxPython_png());
    grid_sizer->Add(bmp3, wxSizerFlags().Border(wxALL));

    auto* bmp4 = new wxStaticBitmap(this, wxID_ANY, wxBitmapBundle::FromBitmap(wxImage(english_xpm)));
    grid_sizer->Add(bmp4, wxSizerFlags().Border(wxALL));

    auto* bmp5 = new wxStaticBitmap(this, wxID_ANY, wxueBundleSVG(wxue_img::wxPython_svg, 1843, 6649, wxSize(16, 16)));
    grid_sizer->Add(bmp5, wxSizerFlags().Border(wxALL));

    auto* bmp6 = new wxStaticBitmap(this, wxID_ANY, wxArtProvider::GetBitmapBundle(wxART_TIP, wxART_TOOLBAR));
    grid_sizer->Add(bmp6, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(grid_sizer, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    return true;
}

namespace wxue_img
{
    // ../art/wxPython.svg
    const unsigned char wxPython_svg[1843] {
        120,218,229,89,77,115,219,70,18,221,159,50,5,95,156,42,96,56,223,31,148,233,75,14,123,74,237,97,55,57,228,6,147,
        160,136,50,8,176,0,88,18,253,235,243,26,32,41,66,38,21,69,182,82,91,187,70,185,12,246,204,244,244,235,126,111,62,
        224,15,221,221,45,187,43,218,174,108,234,69,34,185,72,88,185,90,36,176,170,132,117,205,170,220,225,239,252,212,
        65,112,13,251,125,185,234,55,139,36,104,174,189,20,210,239,250,132,109,138,242,118,211,195,133,128,19,33,69,32,
        99,89,127,238,150,249,174,152,23,15,187,166,237,179,117,89,21,117,190,45,22,201,110,223,111,154,58,171,154,219,
        38,107,234,106,207,119,245,237,183,253,31,86,187,114,145,40,173,184,49,223,182,238,39,173,15,219,170,238,230,237,
        106,189,72,54,125,191,155,207,102,247,247,247,252,94,243,166,189,157,201,24,227,76,168,153,82,25,122,100,221,190,
        238,243,135,172,238,222,29,199,45,151,167,97,203,182,200,251,242,174,88,54,219,109,83,119,195,248,179,158,171,199,
        158,187,47,109,53,52,175,150,179,162,42,182,69,221,119,51,201,229,44,249,248,97,85,172,187,33,149,244,98,96,168,
        202,186,200,219,127,182,249,170,68,191,161,105,106,82,62,90,244,235,250,102,199,186,126,95,33,75,244,158,45,155,
        170,105,231,239,62,5,122,110,6,83,179,203,151,101,191,159,11,110,98,16,58,42,117,147,176,102,189,238,10,84,224,
        88,66,116,132,75,159,204,174,251,244,107,122,158,248,60,115,37,39,174,34,185,154,77,131,126,17,174,224,147,191,
        24,3,183,215,0,133,248,227,0,201,215,1,210,206,187,231,10,165,232,121,33,32,248,10,207,1,250,164,233,121,17,32,
        237,130,120,37,32,165,159,3,180,54,244,76,99,144,151,209,40,40,241,58,154,251,77,217,23,87,253,200,137,159,87,66,
        49,206,203,231,160,172,87,70,127,122,18,194,229,202,192,147,126,174,50,235,117,17,188,126,9,26,120,178,175,69,3,
        186,95,15,193,230,17,120,94,136,102,100,251,53,87,90,184,24,195,117,87,19,56,81,191,4,206,131,196,226,172,12,87,
        58,70,151,176,61,126,74,99,184,183,94,122,44,166,106,145,100,206,114,45,130,21,216,83,246,106,210,124,97,25,137,
        129,134,193,248,121,190,105,11,44,243,239,46,148,158,221,30,126,253,90,151,125,183,72,190,116,69,251,111,224,41,
        254,85,255,218,21,143,205,255,105,243,186,91,55,237,118,145,244,244,90,229,125,241,94,10,193,149,23,42,141,145,
        59,41,165,251,137,112,94,128,37,189,226,209,40,17,70,88,222,115,227,109,12,122,132,165,28,119,240,18,195,136,202,
        59,174,37,30,125,25,85,20,127,130,10,20,120,123,84,167,189,21,124,168,138,37,42,158,87,247,249,190,123,65,108,23,
        64,89,42,213,15,142,249,123,18,255,195,240,122,121,5,111,124,27,188,175,213,207,91,23,88,153,240,127,85,96,101,
        197,255,104,129,175,2,182,175,1,188,205,251,182,124,120,143,227,142,83,214,200,84,208,131,31,56,135,170,52,147,
        146,219,232,77,154,121,238,68,180,230,191,157,228,54,252,109,57,120,202,123,199,165,119,72,204,159,243,158,2,200,
        171,239,75,193,112,245,24,82,48,245,166,130,0,61,150,15,139,196,33,108,25,2,9,113,185,71,184,184,116,169,96,113,
        174,97,235,105,235,122,218,218,34,248,200,133,198,241,67,63,151,173,99,154,164,247,209,57,188,226,6,201,189,209,
        148,159,231,75,240,198,74,144,198,191,133,18,12,143,81,202,145,15,168,44,238,209,71,34,88,193,35,173,16,7,49,68,
        197,181,5,23,70,34,96,8,146,41,233,190,59,104,65,123,172,42,106,188,153,189,165,22,144,133,240,119,102,129,8,111,
        66,212,126,204,130,18,16,139,246,65,30,178,160,45,119,206,42,123,200,2,252,232,232,157,127,107,57,72,19,196,119,
        100,1,24,77,20,214,217,34,11,105,38,134,53,15,135,105,151,74,46,172,113,46,164,154,227,82,106,141,245,69,230,211,
        44,224,167,16,33,149,70,113,227,148,160,228,252,48,45,210,1,158,62,77,124,252,176,203,251,205,241,74,176,46,171,
        106,254,165,173,222,191,251,182,254,63,221,80,235,249,93,7,9,250,133,89,20,81,6,31,108,26,57,216,234,141,146,69,
        102,216,207,12,68,214,160,174,86,168,184,80,74,97,137,243,204,88,30,173,15,6,18,231,134,214,48,23,97,84,92,10,135,
        40,41,19,72,9,46,24,76,11,238,157,192,173,4,73,17,96,137,215,146,169,64,9,1,128,20,180,143,198,123,105,78,54,140,
        181,192,166,164,139,236,142,73,100,23,65,89,182,97,160,82,144,202,194,168,185,193,44,100,203,142,198,12,29,7,219,
        146,97,65,246,81,25,27,83,193,136,153,78,34,105,33,164,120,11,32,166,135,209,81,1,241,7,37,209,88,197,53,252,103,
        84,26,25,228,96,164,73,21,150,47,178,90,250,50,102,169,122,142,219,224,64,110,38,82,133,184,45,147,28,44,136,42,
        104,192,128,147,96,21,115,28,69,183,6,185,58,120,54,129,33,6,245,116,186,13,139,7,96,119,136,71,241,33,114,1,170,
        240,128,174,66,49,236,42,152,217,96,127,193,188,14,170,35,71,136,219,158,12,135,156,248,1,255,18,3,140,53,209,66,
        154,76,30,18,164,211,12,219,143,14,210,153,147,13,195,53,119,67,26,51,101,185,213,242,56,53,32,57,167,117,0,106,
        140,82,20,46,69,230,21,234,227,37,203,38,30,8,89,68,197,127,102,14,232,2,184,30,82,250,166,232,163,129,130,153,
        141,28,251,188,209,131,60,132,130,228,163,208,215,24,246,59,219,14,133,178,105,24,115,34,16,147,143,136,10,179,
        59,108,173,30,152,136,19,48,167,72,85,12,206,88,119,178,88,4,75,233,165,106,21,153,67,15,0,214,122,40,158,114,210,
        11,141,46,98,44,242,227,24,113,172,58,246,41,227,29,64,97,236,99,7,26,235,189,145,103,99,178,211,32,41,6,89,99,
        34,229,180,213,140,202,135,253,206,80,151,99,44,103,163,142,166,175,227,82,68,50,149,209,12,95,139,94,40,89,123,
        81,178,91,22,176,124,34,34,104,6,234,33,190,140,154,33,94,186,67,89,65,51,45,188,181,36,139,64,247,27,75,68,142,
        195,159,81,9,48,248,131,148,142,92,66,95,40,62,104,61,72,104,172,187,137,169,67,78,130,9,250,140,11,39,50,29,184,
        100,252,48,235,200,37,99,24,29,112,2,169,143,142,75,6,178,62,99,226,56,86,8,195,2,55,193,107,45,81,59,80,216,73,
        98,186,83,14,251,72,74,167,41,184,58,49,29,17,81,204,144,36,17,17,107,16,248,118,78,120,203,67,240,228,225,9,223,
        105,154,223,88,128,134,133,136,50,78,0,67,10,143,75,202,201,122,244,96,6,113,209,146,226,6,113,97,11,139,48,75,
        154,203,104,128,10,199,174,216,23,179,147,194,193,172,24,145,65,72,90,71,44,227,14,22,23,176,126,14,2,70,77,189,
        119,36,187,113,41,33,40,32,125,32,25,162,201,24,73,196,195,94,25,252,153,207,236,210,68,95,7,249,216,97,249,75,
        161,198,113,109,24,196,67,212,198,102,68,204,62,211,15,241,218,179,169,20,80,183,147,122,136,212,102,80,15,177,
        122,20,216,144,191,236,92,114,163,101,84,40,85,101,34,29,72,116,170,156,67,255,97,138,236,160,80,54,232,19,251,
        198,81,90,198,179,39,98,131,101,162,26,59,124,77,44,170,170,220,117,197,81,56,103,31,209,177,226,168,155,71,33,
        125,187,235,63,21,210,248,179,253,82,21,243,186,169,191,22,109,115,211,245,109,243,121,248,89,28,222,179,225,255,
        73,230,200,49,18,103,142,198,109,217,23,109,85,226,159,249,201,182,202,187,77,222,182,249,126,50,252,76,182,39,
        40,33,154,241,16,96,45,101,3,148,61,28,2,192,7,236,131,30,167,183,22,173,56,32,69,45,162,199,249,169,69,43,148,
        235,176,129,202,241,11,126,119,119,251,241,31,127,0,74,183,109,167
    };

    }

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Author:    Ralph Walden
// Copyright: Copyright (c) 2024-2025 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

void MainFrame::OnBitmapsDlg(wxCommandEvent& WXUNUSED(event))
{
    BitmapsDlg dlg(this);
    dlg.ShowModal();
}
