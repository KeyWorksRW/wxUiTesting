///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/bmpbndl.h>
#include <wx/button.h>
#include <wx/gbsizer.h>
#include <wx/generic/statbmpg.h>
#include <wx/panel.h>
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/sizer.h>
#include <wx/statbmp.h>

#include "generic_dlg.h"

#include <wx/animate.h>

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert a data array into a wxAnimation
#ifdef __cpp_inline_variables
inline void wxueAnimation(const unsigned char* data, size_t size_data, wxAnimation& animation)
#else
static void wxueAnimation(const unsigned char* data, size_t size_data, wxAnimation& animation)
#endif
{
    wxMemoryInputStream strm(data, size_data);
    animation.Load(strm);
};

namespace wxue_img
{
    extern const unsigned char clr_hourglass_gif[2017];  // ../art/clr_hourglass.gif
}

bool GenericControlsDialog::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
    {
        return false;
    }
    if (!wxImage::FindHandler(wxBITMAP_TYPE_GIF))
        wxImage::AddHandler(new wxGIFHandler);

    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_LARGE);
        SetFont(font);
    }
    SetForegroundColour(wxColour("#FF0000"));

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auto* panel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    box_sizer->Add(panel, wxSizerFlags().Border(wxALL));

    auto* panel_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* bmp = new wxGenericStaticBitmap(panel, wxID_ANY, wxNullBitmap);
    panel_sizer->Add(bmp, wxSizerFlags().Border(wxALL));

    m_animation_ctrl = new wxGenericAnimationCtrl(panel, wxID_ANY, wxNullAnimation, wxDefaultPosition, wxDefaultSize,
        wxAC_DEFAULT_STYLE);
    {
        auto animate = m_animation_ctrl->CreateAnimation();
        wxueAnimation(wxue_img::clr_hourglass_gif, sizeof(wxue_img::clr_hourglass_gif), animate);
        m_animation_ctrl->SetAnimation(animate);
    }
    panel_sizer->Add(m_animation_ctrl, wxSizerFlags().Border(wxALL));

    auto* box_sizer2 = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxGenericStaticText(panel, wxID_ANY, "MyLabel", FromDIP(wxPoint(50, -1)), FromDIP(wxSize(100, -1)));
    box_sizer2->Add(m_staticText, wxSizerFlags().Border(wxALL));

    auto* box_sizer4 = new wxBoxSizer(wxHORIZONTAL);

    auto* bmp2 = new wxStaticBitmap(panel, wxID_ANY, wxNullBitmap);
    box_sizer4->Add(bmp2, wxSizerFlags().Border(wxALL));

    box_sizer2->Add(box_sizer4, wxSizerFlags(2).Border(wxALL));

    m_collapsible_pane = new wxCollapsiblePane(panel, wxID_ANY, "collapsible");
    m_collapsible_pane->Expand();
    box_sizer2->Add(m_collapsible_pane, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer3 = new wxBoxSizer(wxHORIZONTAL);

    m_staticText2 = new wxStaticText(m_collapsible_pane->GetPane(), wxID_ANY, "MyLabel");
    box_sizer3->Add(m_staticText2, wxSizerFlags().Border(wxALL));
    m_collapsible_pane->GetPane()->SetSizerAndFit(box_sizer3);

    panel_sizer->Add(box_sizer2, wxSizerFlags().Expand().Border(wxALL));
    panel->SetSizerAndFit(panel_sizer);

    auto* grid_bag_sizer = new wxGridBagSizer();

    m_hyperlink = new wxGenericHyperlinkCtrl(this, wxID_ANY, "Hyperlink", wxEmptyString);
    grid_bag_sizer->Add(m_hyperlink, wxGBPosition(0, 0), wxGBSpan(1, 1), wxALL, 5);

    m_calendar = new wxGenericCalendarCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize,
        wxCAL_SHOW_HOLIDAYS);
    grid_bag_sizer->Add(m_calendar, wxGBPosition(1, 0), wxGBSpan(1, 1), wxALL, 5);

    m_treeCtrl = new wxGenericTreeCtrl(this, wxID_ANY);
    grid_bag_sizer->Add(m_treeCtrl, wxGBPosition(1, 2), wxGBSpan(1, 1), wxALL, 5);
    {
        grid_bag_sizer->AddGrowableCol(1, 3);
        grid_bag_sizer->AddGrowableCol(3);
    }
    box_sizer->Add(grid_bag_sizer, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    box_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(box_sizer);
    }
    else
    {
        SetSizer(box_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }

    wxPersistentRegisterAndRestore(this, "GenericControlsDialog");

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
