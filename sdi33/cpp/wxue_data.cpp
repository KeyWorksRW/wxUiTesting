///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include "wxue_data.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

namespace wxue_data
{
    // Convert compressed data string into a char array
    std::unique_ptr<unsigned char[]> get_data(const unsigned char* data,
        size_t size_data, size_t size_data_uncompressed)
    {
        auto str = std::unique_ptr<unsigned char[]>(new unsigned char[size_data_uncompressed]);
        wxMemoryInputStream stream_in(data, size_data);
        wxZlibInputStream zlib_strm(stream_in);
        zlib_strm.Read(str.get(), size_data_uncompressed);
        return str;
    };

    // xrc/python_dlg.xrc (4364 bytes)
    const unsigned char xrc_python_dlg[1144] {
            120,218,197,88,221,86,227,54,16,238,163,184,233,69,111,32,134,112,56,187,167,21,222,58,137,129,28,220,56,77,76,
            151,237,141,142,98,43,142,138,108,231,216,10,54,61,188,80,159,163,47,214,145,21,43,63,144,64,96,119,185,137,71,
            51,30,205,167,249,211,56,40,163,121,58,207,2,106,148,49,79,242,179,198,84,136,217,47,166,89,20,69,179,40,11,22,
            70,84,228,205,52,139,204,162,44,179,160,97,220,209,44,103,105,114,214,104,53,79,155,39,205,163,134,133,210,241,
            223,52,16,70,192,73,14,27,20,101,151,17,158,70,13,35,33,49,61,107,12,238,197,52,77,186,60,130,55,5,19,156,90,151,
            148,243,212,80,124,67,189,252,35,50,149,12,229,226,30,30,176,137,115,110,95,187,62,238,246,108,215,187,192,35,255,
            139,235,32,83,73,81,64,19,65,51,26,90,199,200,212,244,35,28,237,180,28,177,127,104,86,35,25,87,171,99,137,56,99,
            160,5,86,254,116,134,126,175,99,187,200,92,176,54,54,201,165,6,19,52,6,165,9,39,17,168,216,174,251,80,148,206,205,
            192,238,119,145,89,49,209,56,205,66,154,89,167,200,92,80,207,99,73,75,92,109,254,118,52,47,7,97,207,153,159,166,
            188,77,52,12,178,228,88,104,70,130,91,150,68,210,169,53,137,114,58,35,25,17,16,113,185,241,202,74,7,202,190,238,
            97,191,141,7,174,221,235,227,182,221,185,186,24,122,215,253,238,131,150,212,145,92,15,225,58,54,78,198,148,215,
            160,4,32,2,56,21,207,114,229,47,50,213,2,141,153,136,201,204,200,69,26,220,98,22,86,135,26,250,248,143,107,103,
            228,247,188,126,99,33,9,184,116,95,45,245,61,207,109,219,195,134,105,129,99,43,179,155,230,43,139,43,214,113,75,
            219,31,81,146,5,83,240,133,198,32,95,16,108,102,249,83,150,27,114,97,228,211,116,206,67,99,76,13,150,48,1,9,205,
            239,141,144,229,100,204,105,216,132,204,94,40,32,158,38,209,148,242,61,84,181,198,226,228,86,179,105,146,76,152,
            147,52,17,3,22,220,210,172,57,75,162,95,31,113,127,59,198,173,211,114,171,108,135,232,195,86,89,171,18,64,118,41,
            36,219,124,153,67,238,208,218,153,224,70,232,33,98,106,29,31,33,83,81,219,244,138,114,52,99,73,71,100,58,18,121,
            189,182,80,204,18,11,118,144,15,20,147,18,182,147,43,32,208,29,225,115,42,101,138,208,105,57,26,96,123,56,244,62,
            227,43,231,203,72,103,157,182,253,152,120,81,225,203,172,118,123,23,125,220,113,250,190,51,196,151,222,176,247,
            151,215,247,237,61,170,112,36,160,130,2,159,150,162,62,104,140,243,37,175,78,188,162,92,116,72,154,11,35,250,239,
            223,4,146,195,72,126,134,213,33,116,235,25,201,63,233,140,44,50,136,199,33,148,109,69,44,43,115,27,210,133,51,102,
            105,46,29,121,208,58,5,247,201,5,146,167,182,78,128,245,17,56,213,2,252,155,49,2,173,136,147,44,162,210,203,106,
            137,38,145,245,211,209,209,199,35,25,8,160,95,233,208,175,208,64,91,171,29,116,245,148,223,166,135,170,232,181,
            171,26,208,88,226,89,67,247,166,144,78,200,156,139,10,220,89,227,164,117,112,2,8,39,80,19,135,121,204,56,109,230,
            119,79,213,208,55,242,218,22,180,173,198,102,67,153,178,144,110,41,239,239,11,237,228,17,52,193,98,213,230,118,
            97,123,183,244,59,121,151,244,219,64,163,218,7,150,160,90,187,7,138,130,37,97,90,44,250,198,230,230,157,41,13,110,
            97,239,101,95,10,36,103,192,201,189,157,176,184,186,248,117,127,146,92,67,179,117,47,90,6,98,135,169,183,122,193,
            79,163,136,211,246,92,8,0,164,193,10,197,21,207,98,172,27,100,251,26,59,55,118,199,63,239,249,59,110,136,175,60,
            131,213,104,86,111,186,24,147,154,141,3,117,227,233,38,222,217,50,64,105,13,43,224,25,134,49,34,139,164,141,102,
            196,38,200,92,10,17,75,72,32,216,29,61,92,20,143,158,46,170,138,218,148,190,67,105,141,130,44,229,0,232,115,149,
            47,43,119,98,197,199,51,146,208,85,135,92,142,58,67,207,117,141,7,3,242,91,209,218,39,74,5,38,84,106,157,30,200,
            121,117,185,126,182,162,43,59,223,127,38,223,62,13,96,1,204,149,65,52,141,169,161,36,134,148,192,192,104,16,67,
            157,208,168,192,111,155,7,94,18,210,189,136,103,61,224,58,231,62,140,74,195,222,197,165,124,250,222,224,45,159,
            76,111,139,70,219,243,125,239,247,87,216,87,145,113,89,66,215,190,28,94,57,57,190,198,126,168,62,142,85,159,91,
            75,86,153,35,161,234,116,235,106,99,213,19,159,240,230,90,179,44,202,94,23,123,87,240,222,98,92,145,31,125,53,249,
            236,17,247,49,210,113,189,145,179,227,211,107,175,189,224,106,117,110,124,124,233,184,3,93,23,159,158,184,122,246,
            34,234,127,64,172,31,254,7,191,78,4,176
        };

    std::string get_xrc_python_dlg()
    {
        return std::string((const char*) get_data(xrc_python_dlg, sizeof(xrc_python_dlg), 4364).get(), 4364);
    }
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
