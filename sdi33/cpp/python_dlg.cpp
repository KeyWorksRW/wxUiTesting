///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/aui/framemanager.h>
#include <wx/bitmap.h>
#include <wx/bmpbndl.h>
#include <wx/cshelp.h>
#include <wx/icon.h>
#include <wx/image.h>
#include <wx/statbmp.h>
#include <wx/statbox.h>

#include "images.h"

#include "python_dlg.h"

#include <wx/animate.h>

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert a data array into a wxImage
#ifdef __cpp_inline_variables
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
#else
static wxImage wxueImage(const unsigned char* data, size_t size_data)
#endif
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

// Convert a data array into a wxAnimation
#ifdef __cpp_inline_variables
inline void wxueAnimation(const unsigned char* data, size_t size_data, wxAnimation& animation)
#else
static void wxueAnimation(const unsigned char* data, size_t size_data, wxAnimation& animation)
#endif
{
    wxMemoryInputStream strm(data, size_data);
    animation.Load(strm);
};

namespace wxue_img
{
    extern const unsigned char clr_hourglass_gif[2017];  // ../art/clr_hourglass.gif
    extern const unsigned char hide_png[242];  // ../art/hide.png
    extern const unsigned char timer_png[1380];  // ../art/timer.png
}

bool PythonDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
    {
        return false;
    }
    if (!wxImage::FindHandler(wxBITMAP_TYPE_GIF))
        wxImage::AddHandler(new wxGIFHandler);
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    auto* bSizer1 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auiToolBar = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
        wxAUI_TB_PLAIN_BACKGROUND);
    auiToolBar->AddLabel(wxID_ANY, "Label");
    auto* tool_2 = auiToolBar->AddTool(wxID_ANY, "Searching", wxue_img::bundle_fontPicker_png(), wxNullBitmap, wxITEM_NORMAL,
        "This tool should be initially disabled.", "This tool should be initially disabled.", nullptr);
    tool_2->SetState(wxAUI_BUTTON_STATE_NORMAL|wxAUI_BUTTON_STATE_DISABLED);
    auiToolBar->AddSpacer(auiToolBar->FromDIP(10));

    spinCtrl = new wxSpinCtrl(auiToolBar);
    auiToolBar->AddControl(spinCtrl);
    auiToolBar->Realize();
    box_sizer->Add(auiToolBar, wxSizerFlags().Border(wxALL));

    m_staticText = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("wxPython est gÃ©nial n\'est-ce pas?"),
        FromDIP(wxPoint(100, 250)), FromDIP(wxSize(300, 80)), wxALIGN_CENTER_HORIZONTAL, "my_text");
    m_staticText->SetWindowVariant(wxWINDOW_VARIANT_LARGE);
    m_staticText->SetForegroundColour(wxColour("#008000"));
    box_sizer->Add(m_staticText, wxSizerFlags().Center().Border(wxALL));

    auto* box_sizer2 = new wxBoxSizer(wxHORIZONTAL);

    auto* bmp = new wxStaticBitmap(this, wxID_ANY, wxue_img::bundle_face_smile_svg(32, 32));
    box_sizer2->Add(bmp, wxSizerFlags().Border(wxALL));

    auto* bmp2 = new wxStaticBitmap(this, wxID_ANY, wxBitmapBundle::FromBitmap(wxueImage(wxue_img::hide_png, sizeof(wxue_img::hide_png))));
    box_sizer2->Add(bmp2, wxSizerFlags().Border(wxALL));

    auto* bmp3 = new wxStaticBitmap(this, wxID_ANY, wxBitmapBundle::FromBitmap(wxueImage(wxue_img::timer_png, sizeof(wxue_img::timer_png))));
    box_sizer2->Add(bmp3, wxSizerFlags().Border(wxALL));

    box_sizer->Add(box_sizer2, wxSizerFlags().Border(wxALL));

    auto* box_sizer3 = new wxBoxSizer(wxHORIZONTAL);

    m_checkPlayAnimation = new wxCheckBox(this, wxID_ANY, "Play Animation");
    auto* static_box_2 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_checkPlayAnimation), wxVERTICAL);

    m_toggleBtn = new wxToggleButton(static_box_2->GetStaticBox(), wxID_ANY, "Play Animation", wxDefaultPosition,
        wxDefaultSize, wxBU_EXACTFIT);
    static_box_2->Add(m_toggleBtn, wxSizerFlags().Border(wxALL));

    m_animation_ctrl = new wxAnimationCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxNullAnimation, wxDefaultPosition,
        wxDefaultSize, wxAC_DEFAULT_STYLE);
    m_animation_ctrl->SetInactiveBitmap(wxue_img::bundle_disabled_png());
    {
        auto animate = m_animation_ctrl->CreateAnimation();
        wxueAnimation(wxue_img::clr_hourglass_gif, sizeof(wxue_img::clr_hourglass_gif), animate);
        m_animation_ctrl->SetAnimation(animate);
    }
    static_box_2->Add(m_animation_ctrl, wxSizerFlags().Border(wxALL));

    box_sizer3->Add(static_box_2, wxSizerFlags().Border(wxALL));

    m_scroll_panel = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxHSCROLL | wxVSCROLL);
    m_scroll_panel->SetScrollRate(5, 5);
    box_sizer3->Add(m_scroll_panel, wxSizerFlags().Border(wxALL));

    auto* panel_sizer = new wxBoxSizer(wxVERTICAL);

    m_static_text2 = new wxStaticText(m_scroll_panel, wxID_ANY, "Some static text in a scroll panel");
    panel_sizer->Add(m_static_text2, wxSizerFlags().Border(wxALL));
    m_scroll_panel->SetSizerAndFit(panel_sizer);

    box_sizer->Add(box_sizer3, wxSizerFlags().Border(wxALL));

    bSizer1->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_stdBtn = new wxStdDialogButtonSizer();
    m_stdBtnOK = new wxButton(this, wxID_OK);
    m_stdBtn->AddButton(m_stdBtnOK);
    m_stdBtnOK->SetDefault();
    m_stdBtnClose = new wxButton(this, wxID_CLOSE);
    m_stdBtn->AddButton(m_stdBtnClose);
    m_stdBtn->AddButton(new wxContextHelpButton(this, wxID_CONTEXT_HELP));
    m_stdBtn->Realize();
    bSizer1->Add(CreateSeparatedSizer(m_stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(bSizer1);
    }
    else
    {
        SetSizer(bSizer1);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_UPDATE_UI, &PythonDlg::OnUpdateClose, this, wxID_CLOSE);
    Bind(wxEVT_BUTTON, &PythonDlg::OnClose, this, wxID_CLOSE);
    m_checkPlayAnimation->Bind(wxEVT_CHECKBOX,
        [this](wxCommandEvent&)
        {
            if (m_checkPlayAnimation->GetValue())
            {
                m_animation_ctrl->Play();
            }
            else
            { 
                m_animation_ctrl->Stop();
            }
        });
    Bind(wxEVT_INIT_DIALOG, &PythonDlg::OnInit, this);
    m_toggleBtn->Bind(wxEVT_TOGGLEBUTTON,
        [this](wxCommandEvent&)
        {
            if (m_toggleBtn->GetValue())
            {
                m_animation_ctrl->Play();
                m_checkPlayAnimation->SetValue(true);
            }
            else
            { 
                m_animation_ctrl->Stop();
                m_checkPlayAnimation->SetValue(false);
            }
            Fit();
        });

    return true;
}

namespace wxue_img
{
    // ../art/timer.png
    const unsigned char timer_png[1380] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,22,0,0,0,22,8,6,0,0,0,196,180,108,59,0,0,0,9,112,72,89,115,
        0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,5,22,73,68,65,84,56,203,125,149,79,108,28,87,29,199,63,239,205,236,238,204,
        236,236,218,238,58,196,201,166,105,156,56,53,77,28,187,212,166,9,162,148,67,15,173,42,14,84,189,229,130,196,1,9,
        14,84,92,136,2,21,72,136,72,72,69,65,37,130,3,234,1,149,67,169,84,65,144,18,98,162,134,74,164,78,173,212,36,217,
        216,110,215,113,188,222,20,199,94,219,217,181,189,127,60,179,243,102,230,113,112,29,84,154,244,123,124,79,191,143,
        190,239,167,223,239,251,4,15,209,59,239,188,171,45,43,133,97,72,132,16,104,173,9,2,133,231,5,180,90,45,86,86,214,
        56,121,242,187,226,97,245,159,187,56,119,238,178,22,66,208,219,155,39,159,223,129,155,78,17,180,3,194,40,38,142,
        34,12,51,193,218,122,147,185,185,5,174,93,155,161,90,93,230,212,169,31,137,47,4,95,184,48,166,109,219,226,232,209,
        1,132,128,233,226,2,133,91,53,2,233,96,152,6,45,175,77,82,173,241,229,125,93,28,236,237,217,174,97,118,246,54,175,
        189,246,99,241,64,240,232,232,21,189,107,215,14,6,7,251,152,40,148,153,173,74,14,244,230,232,221,157,134,205,144,
        179,127,91,225,249,111,247,224,27,146,210,221,6,31,79,126,194,129,84,141,161,161,3,92,190,92,224,234,213,235,156,
        57,243,211,251,60,9,112,254,252,251,218,113,82,12,14,246,241,254,216,36,31,181,58,56,118,108,47,143,246,56,0,52,
        67,141,149,49,105,135,154,132,1,143,229,93,158,123,254,48,5,113,136,139,255,156,226,232,209,195,244,245,245,242,
        226,139,199,245,103,192,134,33,121,250,233,1,38,10,119,184,218,218,205,87,134,186,240,35,141,175,5,94,12,86,71,
        130,23,190,245,37,76,199,192,143,52,36,5,126,4,207,12,119,49,107,244,113,227,250,45,158,26,30,224,200,145,145,251,
        173,144,103,207,190,167,247,239,207,3,240,238,45,205,240,96,23,94,0,74,139,45,120,12,13,5,107,1,52,53,72,75,240,
        198,233,223,240,209,205,105,154,126,204,224,83,251,120,251,186,73,212,222,100,231,206,30,94,126,249,251,26,64,90,
        86,138,158,158,110,38,139,139,200,206,46,90,126,76,203,139,217,84,26,47,218,114,230,71,224,107,80,10,126,117,226,
        36,175,255,236,4,149,165,21,252,182,134,40,36,55,48,194,196,212,34,253,253,123,233,232,216,177,229,56,145,48,201,
        184,54,19,197,26,24,73,90,158,166,233,199,212,61,104,248,49,205,182,166,217,214,40,3,206,156,250,57,127,254,195,
        239,56,253,215,15,56,48,244,12,155,109,240,213,214,211,175,87,92,12,67,226,186,46,79,62,249,172,54,1,194,160,205,
        237,90,138,172,29,177,81,23,144,53,136,163,8,15,208,194,96,122,124,148,137,247,46,48,250,246,31,249,197,155,151,
        216,221,63,76,189,17,112,111,61,98,226,227,54,255,158,220,164,63,235,208,110,7,100,179,14,150,149,198,220,110,182,
        31,74,166,206,87,24,254,70,23,123,250,50,212,26,10,41,77,150,203,55,160,112,142,123,51,55,112,50,143,240,167,95,
        255,4,76,151,111,126,239,247,52,194,52,181,37,31,85,92,69,124,45,129,82,62,0,74,5,152,74,133,132,81,76,167,29,210,
        255,236,30,252,148,96,225,158,162,195,145,100,28,200,13,244,243,250,111,63,32,8,35,14,125,245,235,40,21,33,76,11,
        219,84,24,150,36,222,103,99,58,121,92,191,136,10,20,173,150,7,128,217,110,7,8,195,100,111,186,201,132,54,216,97,
        105,114,25,131,108,90,210,145,22,164,237,52,191,124,235,18,113,164,72,103,187,241,149,160,233,107,214,54,2,214,
        155,241,253,241,114,23,55,136,34,201,198,70,131,106,181,130,185,217,242,168,215,91,28,234,237,160,124,215,163,195,
        113,232,204,72,114,25,73,103,70,98,167,36,102,103,23,82,64,172,193,87,154,164,9,144,4,2,84,8,65,0,185,184,66,109,
        45,67,189,222,160,92,158,198,92,89,93,99,126,126,145,39,14,238,225,70,165,130,145,238,165,203,149,91,142,109,73,
        74,106,12,41,72,8,80,26,164,216,218,218,40,210,4,129,196,139,18,172,76,252,157,93,221,105,74,229,101,238,220,153,
        6,16,242,149,87,142,139,66,225,22,113,28,115,40,91,199,194,195,78,73,210,159,66,45,67,144,73,128,107,128,37,193,
        49,193,73,10,92,27,156,148,68,45,207,145,151,21,218,74,179,180,180,192,135,31,94,252,223,74,175,172,84,184,248,
        143,113,142,28,233,35,183,124,19,191,186,140,157,4,203,16,184,6,36,195,152,234,146,71,2,141,37,33,37,53,233,180,
        100,227,110,25,127,250,50,61,61,221,204,205,125,194,248,248,232,253,96,147,0,175,190,250,3,49,123,123,150,43,87,
        10,140,140,60,65,178,82,98,230,202,53,140,79,179,106,163,22,240,230,27,11,108,174,43,164,220,58,27,251,203,40,171,
        87,255,197,99,123,186,153,154,42,81,44,22,40,149,110,62,56,143,79,156,56,173,31,127,124,63,35,35,135,105,181,60,
        202,229,69,220,71,58,113,29,27,21,25,196,132,172,174,214,184,91,250,15,157,217,52,42,140,152,153,153,167,88,44,
        112,233,210,91,159,225,125,46,249,95,122,233,59,122,104,232,24,249,252,46,14,30,124,148,100,50,129,231,249,40,21,
        226,251,109,194,48,162,86,171,51,63,191,196,194,194,2,99,99,231,183,157,138,47,252,154,182,117,252,248,15,117,46,
        183,19,215,205,96,219,22,134,33,104,54,61,106,181,117,26,141,38,165,210,36,227,227,23,30,202,120,40,120,91,195,
        195,207,105,219,118,8,195,144,40,138,168,86,43,15,116,248,255,250,47,81,108,86,19,222,46,5,7,0,0,0,0,73,69,78,68,
        174,66,96,130
    };

    }

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2025 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

void PythonDlg::OnInit(wxInitDialogEvent& event)
{
    event.Skip();  // transfer all validator data to their windows and update UI
}

#include "mainframe.h"

void MainFrame::OnPythonDlg(wxCommandEvent& WXUNUSED(event))
{
    PythonDlg dlg(this);
    dlg.ShowModal();
}

void PythonDlg::OnClose(wxCommandEvent& WXUNUSED(event))
{
    EndModal(wxID_CLOSE);
}

void PythonDlg::OnUpdateClose(wxUpdateUIEvent& WXUNUSED(event))
{
    auto btn = m_stdBtn->GetCancelButton();
    wxASSERT_MSG(btn, "Close button should have been set to SetCancelButton()!");
    btn->SetLabel("Close Me!");
}
