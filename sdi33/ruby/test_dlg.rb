###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'

require 'base64'
require 'stringio'

class GenericControlsDialog < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title =
  'Generic Controls Test Dialog', pos = Wx::DEFAULT_POSITION,
                 size = Wx::DEFAULT_SIZE, style = Wx::DEFAULT_DIALOG_STYLE|
                 Wx::RESIZE_BORDER)

    super(parent, id, title, pos, size, style)
    font = Wx::Font.new(Wx::SystemSettings.get_font(Wx::SYS_DEFAULT_GUI_FONT))
    font.set_symbolic_size(Wx::FONTSIZE_LARGE)
    set_font(font)
    set_foreground_colour(Wx::Colour.new('#FF0000'))

    box_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    panel = Wx::Panel.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TAB_TRAVERSAL)
    box_sizer.add(panel, Wx::SizerFlags.new.border(Wx::ALL))

    panel_sizer = Wx::BoxSizer.new(Wx::HORIZONTAL)

    bmp = Wx::StaticBitmap.new("test", panel, Wx::ID_ANY, Wx::NULL_BITMAP)
    panel_sizer.add(bmp, Wx::SizerFlags.new.border(Wx::ALL))

    @animation_ctrl = Wx::AnimationCtrl.new(panel, Wx::ID_ANY, get_animation($clr_hourglass_gif),
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::AC_DEFAULT_STYLE)
    panel_sizer.add(@animation_ctrl, Wx::SizerFlags.new.border(Wx::ALL))

    box_sizer2 = Wx::BoxSizer.new(Wx::VERTICAL)

    @staticText = Wx::StaticText.new(panel, Wx::ID_ANY, 'MyLabel',
      from_dip(Wx::Point.new(50, -1)), from_dip(Wx::Size.new(100, -1)))
    box_sizer2.add(@staticText, Wx::SizerFlags.new.border(Wx::ALL))

    box_sizer4 = Wx::BoxSizer.new(Wx::HORIZONTAL)

    bmp2 = Wx::StaticBitmap.new(panel, Wx::ID_ANY, Wx::NULL_BITMAP)
    box_sizer4.add(bmp2, Wx::SizerFlags.new.border(Wx::ALL))

    box_sizer2.add(box_sizer4, Wx::SizerFlags.new(2).border(Wx::ALL))

    @collapsible_pane = Wx::CollapsiblePane.new(panel, Wx::ID_ANY, 'collapsible')
    @collapsible_pane.expand
    box_sizer2.add(@collapsible_pane, Wx::SizerFlags.new.expand.border(Wx::ALL))

    box_sizer3 = Wx::BoxSizer.new(Wx::HORIZONTAL)

    @staticText2 = Wx::StaticText.new(@collapsible_pane.get_pane(), Wx::ID_ANY,
      'MyLabel')
    box_sizer3.add(@staticText2, Wx::SizerFlags.new.border(Wx::ALL))
    @collapsible_pane.get_pane().set_sizer_and_fit(box_sizer3)

    panel_sizer.add(box_sizer2, Wx::SizerFlags.new.expand.border(Wx::ALL))
    panel.set_sizer_and_fit(panel_sizer)

    grid_bag_sizer = Wx::GridBagSizer.new

    @hyperlink = Wx::HyperlinkCtrl.new(self, Wx::ID_ANY, 'Hyperlink', '')
    grid_bag_sizer.add(@hyperlink, Wx::GBPosition.new(0, 0), Wx::GBSpan.new(1, 1),
      Wx::ALL, 5)

    @calendar = Wx::CalendarCtrl.new(self, Wx::ID_ANY, DateTime.now,
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::CAL_SHOW_HOLIDAYS)
    grid_bag_sizer.add(@calendar, Wx::GBPosition.new(1, 0), Wx::GBSpan.new(1, 1),
      Wx::ALL, 5)

    @treeCtrl = Wx::TreeCtrl.new(self, Wx::ID_ANY)
    grid_bag_sizer.add(@treeCtrl, Wx::GBPosition.new(1, 2), Wx::GBSpan.new(1, 1),
      Wx::ALL, 5)

    grid_bag_sizer.add_growable_col(1, 3)
    grid_bag_sizer.add_growable_col(3)
    box_sizer.add(grid_bag_sizer, Wx::SizerFlags.new.border(Wx::ALL))

    stdBtn = create_std_dialog_button_sizer(Wx::OK|Wx::CANCEL)
    box_sizer.add(create_separated_sizer(stdBtn),
      Wx::SizerFlags.new.expand.border(Wx::ALL))

    set_sizer_and_fit(box_sizer)

    Wx.persistent_register_and_restore(self, "GenericControlsDialog");
  end


# Loads image(s) from a string and returns a Wx::BitmapBundle object.
def wxue_get_bundle(image_name1, image_name2 = nil, image_name3 = nil)
  image1 = Wx::Image.new
  image1.load_stream(StringIO.new(image_name1))
  if (image_name2)
    image2 = Wx::Image.new
    image2.load_stream(StringIO.new(image_name2))
    if (image_name3)
      image3 = Wx::Image.new
      image3.load_stream(StringIO.new(image_name3))
      bitmaps = [Wx::Bitmap.new(image1),
                 Wx::Bitmap.new(image2),
                 Wx::Bitmap.new(image3)]
      bundle = Wx::BitmapBundle.from_bitmaps(bitmaps)
      return bundle
    else
      bundle = Wx::BitmapBundle.from_bitmaps(Wx::Bitmap.new(image1),
                                             Wx::Bitmap.new(image2))
      return bundle
    end
  end
  bundle = Wx::BitmapBundle.from_image(image1)
  return bundle
end

# Loads image from a string and returns a Wx::Animation object.
def get_animation(image_name)
  animation = Wx::Animation.new
  animation.load(StringIO.new(image_name))
  return animation
end

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

end  # end of GenericControlsDialog class