###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

import wx

import python_dlg
import wizard

class MainFrame(wx.Frame):

    def __init__(self, parent, id=wx.ID_ANY, title="wxUiTesting", pos=
                wx.DefaultPosition, size=wx.Size(500, 300),
                style=wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL,
                name=wx.FrameNameStr):
        wx.Frame.__init__(self)

        self.Create(parent, id, title, pos, size, style, name)

        menubar = wx.MenuBar()

        menuDialogs = wx.Menu()
        menu_item_2 = wx.MenuItem(menuDialogs, wx.ID_ANY, "PythonDlg")
        bitmaps = [ wx.Bitmap("../art/wxPython.png"),
                    wx.Bitmap("../art/wxPython_1_5x.png"),
                    wx.Bitmap("../art/wxPython_2x.png") ]
        menu_item_2.SetBitmap(wx.BitmapBundle.FromBitmaps(bitmaps))
        menuDialogs.Append(menu_item_2)
        menuItem_2 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Common Controls...",
            "Common controls", wx.ITEM_NORMAL)
        menuItem_2.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_TIP, wx.ART_MENU))
        menuDialogs.Append(menuItem_2)
        menuItem = wx.MenuItem(menuDialogs, wx.ID_ANY, "DlgMulitTest...",
            "Launch DlgMultiTest Dialog", wx.ITEM_NORMAL)
        menuItem.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_INFORMATION, wx.ART_MENU))
        menuDialogs.Append(menuItem)
        menu_item = wx.MenuItem(menuDialogs, wx.ID_ANY, "Import Tests")
        menu_item.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_GOTO_LAST, wx.ART_MENU))
        menuDialogs.Append(menu_item)
        menuItem1 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Other Controls Dialog...")
        menuDialogs.Append(menuItem1)
        menuItem2 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Ribbon Dialog")
        menuDialogs.Append(menuItem2)
        menuItem3 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Wizard")
        menuDialogs.Append(menuItem3)

        submenu = wx.Menu()
        menu_choicebook = wx.MenuItem(submenu, wx.ID_ANY, "Choicebook")
        submenu.Append(menu_choicebook)
        menu_listbook = wx.MenuItem(submenu, wx.ID_ANY, "Listbook")
        submenu.Append(menu_listbook)
        menu_notebook = wx.MenuItem(submenu, wx.ID_ANY, "Notebook")
        submenu.Append(menu_notebook)
        menu_toolbook = wx.MenuItem(submenu, wx.ID_ANY, "Toolbook")
        submenu.Append(menu_toolbook)
        menu_treebook = wx.MenuItem(submenu, wx.ID_ANY, "Treebook")
        submenu.Append(menu_treebook)
        menuDialogs.AppendSubMenu(submenu, "Book Controls")

        menuDialogs.AppendSeparator()
        menuItem4 = wx.MenuItem(menuDialogs, wx.ID_EXIT, "Exit")
        menuDialogs.Append(menuItem4)
        menubar.Append(menuDialogs, "&Dialogs")

        self.SetMenuBar(menubar)

        self.m_toolBar = self.CreateToolBar()
        tool_4 = self.m_toolBar.AddTool(wx.ID_ANY, "PythonDlg", wx.BitmapBundle.FromBitmap(
            wx.Bitmap("../art/wxPython_1_5x.png")))

        tool_2 = self.m_toolBar.AddTool(wx.ID_ANY, "Common Controls...",
            wx.ArtProvider.GetBitmapBundle(wx.ART_TIP, wx.ART_TOOLBAR))

        tool = self.m_toolBar.AddTool(wx.ID_ANY, "DlgMulitTest...",
            wx.ArtProvider.GetBitmapBundle(wx.ART_INFORMATION, wx.ART_TOOLBAR), wx.NullBitmap,
            wx.ITEM_NORMAL, "Launch DlgMultiTest Dialog", "Launch DlgMultiTest Dialog")

        tool_3 = self.m_toolBar.AddTool(wx.ID_ANY, "ImportTest",
            wx.ArtProvider.GetBitmapBundle(wx.ART_GOTO_LAST, wx.ART_TOOLBAR), wx.NullBitmap,
            wx.ITEM_NORMAL, "Import Test", "Import Test")

        self.m_toolBar.Realize()

        self.m_statusBar = self.CreateStatusBar(2)
        self.m_statusBar.SetStatusWidths([100, -1])
        self.m_statusBar.SetStatusStyles([wx.SB_FLAT, wx.SB_FLAT])


        self.Centre(wx.BOTH)

        # Bind Event handlers
        self.Bind(wx.EVT_MENU, self.OnPythonDlg, id=menu_item_2.GetId())
        self.Bind(wx.EVT_MENU, self.OnCommonDialog, id=menuItem_2.GetId())
        self.Bind(wx.EVT_MENU, self.OnMultiTestDialog, id=menuItem.GetId())
        self.Bind(wx.EVT_MENU, self.OnImportTest, id=menu_item.GetId())
        self.Bind(wx.EVT_MENU, self.OnOtherCtrls, id=menuItem1.GetId())
        self.Bind(wx.EVT_MENU, self.OnRibbonDialog, id=menuItem2.GetId())
        self.Bind(wx.EVT_MENU, self.OnWizard, id=menuItem3.GetId())
        self.Bind(wx.EVT_MENU, self.OnChoicebook, id=menu_choicebook.GetId())
        self.Bind(wx.EVT_MENU, self.OnListbook, id=menu_listbook.GetId())
        self.Bind(wx.EVT_MENU, self.OnNotebook, id=menu_notebook.GetId())
        self.Bind(wx.EVT_MENU, self.OnToolbook, id=menu_toolbook.GetId())
        self.Bind(wx.EVT_MENU, self.OnTreebook, id=menu_treebook.GetId())
        self.Bind(wx.EVT_MENU, self.OnQuit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_TOOL, self.OnPythonDlg, id=tool_4.GetId())
        self.Bind(wx.EVT_TOOL, self.OnCommonDialog, id=tool_2.GetId())
        self.Bind(wx.EVT_TOOL, self.OnMultiTestDialog, id=tool.GetId())
        self.Bind(wx.EVT_TOOL, self.OnImportTest, id=tool_3.GetId())

    # Event handler functions
    # Add these below the comment block, or to your inherited class.
    """
    def OnPythonDlg(self, event):
        event.Skip()

    def OnCommonDialog(self, event):
        event.Skip()

    def OnMultiTestDialog(self, event):
        event.Skip()

    def OnImportTest(self, event):
        event.Skip()

    def OnOtherCtrls(self, event):
        event.Skip()

    def OnRibbonDialog(self, event):
        event.Skip()

    def OnWizard(self, event):
        event.Skip()

    def OnChoicebook(self, event):
        event.Skip()

    def OnListbook(self, event):
        event.Skip()

    def OnNotebook(self, event):
        event.Skip()

    def OnToolbook(self, event):
        event.Skip()

    def OnTreebook(self, event):
        event.Skip()

    def OnQuit(self, event):
        event.Skip()

    def OnPythonDlg(self, event):
        event.Skip()

    def OnCommonDialog(self, event):
        event.Skip()

    def OnMultiTestDialog(self, event):
        event.Skip()

    def OnImportTest(self, event):
        event.Skip()

    """

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

    # Event handler functions
    def OnChoicebook(self, event):
        event.Skip()

    def OnCommonDialog(self, event):
        event.Skip()

    def OnImportTest(self, event):
        event.Skip()

    def OnListbook(self, event):
        event.Skip()

    def OnMultiTestDialog(self, event):
        event.Skip()

    def OnNotebook(self, event):
        event.Skip()

    def OnOtherCtrls(self, event):
        event.Skip()

    def OnQuit(self, event):
        self.Close()

    def OnRibbonDialog(self, event):
        event.Skip()

    def OnToolbook(self, event):
        event.Skip()

    def OnTreebook(self, event):
        event.Skip()

    def OnWizard(self, event):
        my_wizard = wizard.Wizard(self)
        my_wizard.Run()
        my_wizard.Destroy()

    def OnPythonDlg(self, event):
        dlg = python_dlg.PythonDlg(self, title="PythonDlg")
        dlg.ShowModal()
        dlg.Destroy()
