////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/bitmap.h>
#include <wx/bmpbndl.h>
#include <wx/button.h>
#include <wx/icon.h>
#include <wx/image.h>
#include <wx/sizer.h>
#include <wx/statbmp.h>

#include "python_dlg_base.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert compressed SVG string into a wxBitmapBundle
inline wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
{
    auto str = std::make_unique<char[]>(size_svg);
    wxMemoryInputStream stream_in(data, size_data);
    wxZlibInputStream zlib_strm(stream_in);
    zlib_strm.Read(str.get(), size_svg);
    return wxBitmapBundle::FromSVG(str.get(), def_size);
};

namespace wxue_img
{
    extern const unsigned char face_smile_svg[1781];
}

bool PythonDlgBase::Create(wxWindow* parent, wxWindowID id, const wxString& title,
        const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* bSizer1 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);
    bSizer1->Add(box_sizer, wxSizerFlags(1).Expand().Border(wxALL));

    m_staticText2 = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("wxPython est gÃ©nial n\'est-ce pas?"),
        ConvertDialogToPixels(wxPoint(50, 100)), ConvertDialogToPixels(wxSize(150, 32)), wxALIGN_RIGHT, "my_text");
    m_staticText2->SetWindowVariant(wxWINDOW_VARIANT_LARGE);
    m_staticText2->SetForegroundColour(wxColour(0, 128, 0));
    box_sizer->Add(m_staticText2, wxSizerFlags().Center().Border(wxALL));

    m_textCtrl = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxTE_MULTILINE|wxTE_READONLY, wxDefaultValidator, "my_window");
#if !defined(__WXGTK__)
        m_textCtrl->SetMaxLength(120);
#endif
    m_textCtrl->SetToolTip("Enter some exciting text here!");
    box_sizer->Add(m_textCtrl, wxSizerFlags().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    bSizer1->Add(box_sizer_2, wxSizerFlags(1).Expand().Border(wxALL));

    m_comboBox = new wxComboBox(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_SORT);
    m_comboBox->SetHint("Does this work?");
    m_comboBox->Append("foo");
    m_comboBox->Append("bar");
    m_comboBox->Append("cat");
    m_comboBox->Append("dog");
    box_sizer_2->Add(m_comboBox, wxSizerFlags(1).Expand().Border(wxALL));

    m_radioBtn = new wxRadioButton(this, wxID_ANY, "My RadioBtn");
    m_radioBtn->SetValue(true);
    box_sizer_2->Add(m_radioBtn, wxSizerFlags().Border(wxALL));

    auto* bmp = new wxStaticBitmap(this, wxID_ANY, wxueBundleSVG(wxue_img::face_smile_svg, 1781, 7417, wxSize(24, 24)));
    box_sizer_2->Add(bmp, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    bSizer1->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(bSizer1);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &PythonDlgBase::OnInit, this);
    m_textCtrl->Bind(wxEVT_TEXT, &PythonDlgBase::OnText, this);

    return true;
}
